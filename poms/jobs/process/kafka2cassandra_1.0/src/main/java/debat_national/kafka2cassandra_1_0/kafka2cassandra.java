// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package debat_national.kafka2cassandra_1_0;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: kafka2cassandra Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.2.1.20190620_1446
 * @status
 */
public class kafka2cassandra implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (group_cassandra != null) {

				this.setProperty("group_cassandra", group_cassandra.toString());

			}

			if (cassandra_host != null) {

				this.setProperty("cassandra_host", cassandra_host.toString());

			}

			if (cassandra_port != null) {

				this.setProperty("cassandra_port", cassandra_port.toString());

			}

			if (column_family != null) {

				this.setProperty("column_family", column_family.toString());

			}

			if (data != null) {

				this.setProperty("data", data.toString());

			}

			if (kafka_host != null) {

				this.setProperty("kafka_host", kafka_host.toString());

			}

			if (keyspace != null) {

				this.setProperty("keyspace", keyspace.toString());

			}

			if (local != null) {

				this.setProperty("local", local.toString());

			}

			if (topic_cassandra != null) {

				this.setProperty("topic_cassandra", topic_cassandra.toString());

			}

			if (url != null) {

				this.setProperty("url", url.toString());

			}

			if (zookeeper_host != null) {

				this.setProperty("zookeeper_host", zookeeper_host.toString());

			}

		}

		public String group_cassandra;

		public String getGroup_cassandra() {
			return this.group_cassandra;
		}

		public String cassandra_host;

		public String getCassandra_host() {
			return this.cassandra_host;
		}

		public String cassandra_port;

		public String getCassandra_port() {
			return this.cassandra_port;
		}

		public String column_family;

		public String getColumn_family() {
			return this.column_family;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		public String kafka_host;

		public String getKafka_host() {
			return this.kafka_host;
		}

		public String keyspace;

		public String getKeyspace() {
			return this.keyspace;
		}

		public String local;

		public String getLocal() {
			return this.local;
		}

		public String topic_cassandra;

		public String getTopic_cassandra() {
			return this.topic_cassandra;
		}

		public String url;

		public String getUrl() {
			return this.url;
		}

		public String zookeeper_host;

		public String getZookeeper_host() {
			return this.zookeeper_host;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "1.0";
	private final String jobName = "kafka2cassandra";
	private final String projectName = "DEBAT_NATIONAL";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					kafka2cassandra.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(kafka2cassandra.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tKafkaInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tKafkaInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tKafkaInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tCassandraOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tKafkaInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tCassandraClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCassandraClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tKafkaConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tKafkaConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tCassandraConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCassandraConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tKafkaInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCassandraClose_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tKafkaConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCassandraConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DEBAT_NATIONAL_kafka2cassandra = new byte[0];
		static byte[] commonByteArray_DEBAT_NATIONAL_kafka2cassandra = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String theme;

		public String getTheme() {
			return this.theme;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String reference;

		public String getReference() {
			return this.reference;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		public java.util.Date createdAt;

		public java.util.Date getCreatedAt() {
			return this.createdAt;
		}

		public java.util.Date publishedAt;

		public java.util.Date getPublishedAt() {
			return this.publishedAt;
		}

		public java.util.Date updatedAt;

		public java.util.Date getUpdatedAt() {
			return this.updatedAt;
		}

		public String trashed;

		public String getTrashed() {
			return this.trashed;
		}

		public String trashedStatus;

		public String getTrashedStatus() {
			return this.trashedStatus;
		}

		public String authorId;

		public String getAuthorId() {
			return this.authorId;
		}

		public String authorType;

		public String getAuthorType() {
			return this.authorType;
		}

		public String authorZipCode;

		public String getAuthorZipCode() {
			return this.authorZipCode;
		}

		public String Quel_est_aujourd_hui_pour_vous_le_probleme_concret_le_plus_important_dans_le_domaine_de_l_environnement__;

		public String getQuel_est_aujourd_hui_pour_vous_le_probleme_concret_le_plus_important_dans_le_domaine_de_l_environnement__() {
			return this.Quel_est_aujourd_hui_pour_vous_le_probleme_concret_le_plus_important_dans_le_domaine_de_l_environnement__;
		}

		public String Que_faudrait_il_faire_selon_vous_pour_apporter_des_reponses_a_ce_probleme__;

		public String getQue_faudrait_il_faire_selon_vous_pour_apporter_des_reponses_a_ce_probleme__() {
			return this.Que_faudrait_il_faire_selon_vous_pour_apporter_des_reponses_a_ce_probleme__;
		}

		public String Diriez_vous_que_votre_vie_quotidienne_est_aujourd_hui_touchee_par_le_changement_climatique__;

		public String getDiriez_vous_que_votre_vie_quotidienne_est_aujourd_hui_touchee_par_le_changement_climatique__() {
			return this.Diriez_vous_que_votre_vie_quotidienne_est_aujourd_hui_touchee_par_le_changement_climatique__;
		}

		public String Si_oui__de_quelle_maniere_votre_vie_quotidienne_est_elle_touchee_par_le_changement_climatique__;

		public String getSi_oui__de_quelle_maniere_votre_vie_quotidienne_est_elle_touchee_par_le_changement_climatique__() {
			return this.Si_oui__de_quelle_maniere_votre_vie_quotidienne_est_elle_touchee_par_le_changement_climatique__;
		}

		public String A_titre_personnel__pensez_vous_pouvoir_contribuer_a_proteger_l_environnement__;

		public String getA_titre_personnel__pensez_vous_pouvoir_contribuer_a_proteger_l_environnement__() {
			return this.A_titre_personnel__pensez_vous_pouvoir_contribuer_a_proteger_l_environnement__;
		}

		public String Si_oui__que_faites_vous_aujourd_hui_pour_proteger_l_environnement_et_ou_que_pourriez_vous_faire__;

		public String getSi_oui__que_faites_vous_aujourd_hui_pour_proteger_l_environnement_et_ou_que_pourriez_vous_faire__() {
			return this.Si_oui__que_faites_vous_aujourd_hui_pour_proteger_l_environnement_et_ou_que_pourriez_vous_faire__;
		}

		public String Qu_est_ce_qui_pourrait_vous_inciter_a_changer_vos_comportements_comme_par_exemple_mieux_entretenir_et_regler_votre_chauffage__modifier_votre_maniere_de_conduire_ou_renoncer_a_prendre_votre_vehicule_pour_de_tres_petites_distances__;

		public String getQu_est_ce_qui_pourrait_vous_inciter_a_changer_vos_comportements_comme_par_exemple_mieux_entretenir_et_regler_votre_chauffage__modifier_votre_maniere_de_conduire_ou_renoncer_a_prendre_votre_vehicule_pour_de_tres_petites_distances__() {
			return this.Qu_est_ce_qui_pourrait_vous_inciter_a_changer_vos_comportements_comme_par_exemple_mieux_entretenir_et_regler_votre_chauffage__modifier_votre_maniere_de_conduire_ou_renoncer_a_prendre_votre_vehicule_pour_de_tres_petites_distances__;
		}

		public String Quelles_seraient_pour_vous_les_solutions_les_plus_simples_et_les_plus_supportables_sur_un_plan_financier_pour_vous_inciter_a_changer_vos_comportements__;

		public String getQuelles_seraient_pour_vous_les_solutions_les_plus_simples_et_les_plus_supportables_sur_un_plan_financier_pour_vous_inciter_a_changer_vos_comportements__() {
			return this.Quelles_seraient_pour_vous_les_solutions_les_plus_simples_et_les_plus_supportables_sur_un_plan_financier_pour_vous_inciter_a_changer_vos_comportements__;
		}

		public String Par_rapport_a_votre_mode_de_chauffage_actuel__pensez_vous_qu_il_existe_des_solutions_alternatives_plus_ecologiques__;

		public String getPar_rapport_a_votre_mode_de_chauffage_actuel__pensez_vous_qu_il_existe_des_solutions_alternatives_plus_ecologiques__() {
			return this.Par_rapport_a_votre_mode_de_chauffage_actuel__pensez_vous_qu_il_existe_des_solutions_alternatives_plus_ecologiques__;
		}

		public String Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_changer_de_mode_de_chauffage__;

		public String getSi_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_changer_de_mode_de_chauffage__() {
			return this.Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_changer_de_mode_de_chauffage__;
		}

		public String Avez_vous_pour_vos_deplacements_quotidiens_la_possibilite_de_recourir_a_des_solutions_de_mobilite_alternatives_a_la_voiture_individuelle_comme_les_transports_en_commun__le_covoiturage__l_auto_partage__le_transport_a_la_demande__le_velo__etc___;

		public String getAvez_vous_pour_vos_deplacements_quotidiens_la_possibilite_de_recourir_a_des_solutions_de_mobilite_alternatives_a_la_voiture_individuelle_comme_les_transports_en_commun__le_covoiturage__l_auto_partage__le_transport_a_la_demande__le_velo__etc___() {
			return this.Avez_vous_pour_vos_deplacements_quotidiens_la_possibilite_de_recourir_a_des_solutions_de_mobilite_alternatives_a_la_voiture_individuelle_comme_les_transports_en_commun__le_covoiturage__l_auto_partage__le_transport_a_la_demande__le_velo__etc___;
		}

		public String Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_utiliser_ces_solutions_alternatives__;

		public String getSi_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_utiliser_ces_solutions_alternatives__() {
			return this.Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_utiliser_ces_solutions_alternatives__;
		}

		public String Si_non__quelles_sont_les_solutions_de_mobilite_alternatives_que_vous_souhaiteriez_pouvoir_utiliser__;

		public String getSi_non__quelles_sont_les_solutions_de_mobilite_alternatives_que_vous_souhaiteriez_pouvoir_utiliser__() {
			return this.Si_non__quelles_sont_les_solutions_de_mobilite_alternatives_que_vous_souhaiteriez_pouvoir_utiliser__;
		}

		public String Et_qui_doit_selon_vous_se_charger_de_vous_proposer_ce_type_de_solutions_alternatives__;

		public String getEt_qui_doit_selon_vous_se_charger_de_vous_proposer_ce_type_de_solutions_alternatives__() {
			return this.Et_qui_doit_selon_vous_se_charger_de_vous_proposer_ce_type_de_solutions_alternatives__;
		}

		public String Que_pourrait_faire_la_France_pour_faire_partager_ses_choix_en_matiere_d_environnement_au_niveau_europeen_et_international__;

		public String getQue_pourrait_faire_la_France_pour_faire_partager_ses_choix_en_matiere_d_environnement_au_niveau_europeen_et_international__() {
			return this.Que_pourrait_faire_la_France_pour_faire_partager_ses_choix_en_matiere_d_environnement_au_niveau_europeen_et_international__;
		}

		public String Y_a_t_il_d_autres_points_sur_la_transition_ecologique_sur_lesquels_vous_souhaiteriez_vous_exprimer__;

		public String getY_a_t_il_d_autres_points_sur_la_transition_ecologique_sur_lesquels_vous_souhaiteriez_vous_exprimer__() {
			return this.Y_a_t_il_d_autres_points_sur_la_transition_ecologique_sur_lesquels_vous_souhaiteriez_vous_exprimer__;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.theme == null) ? 0 : this.theme.hashCode());

				result = prime * result + ((this.reference == null) ? 0 : this.reference.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.theme == null) {
				if (other.theme != null)
					return false;

			} else if (!this.theme.equals(other.theme))

				return false;

			if (this.reference == null) {
				if (other.reference != null)
					return false;

			} else if (!this.reference.equals(other.reference))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.theme = this.theme;
			other.id = this.id;
			other.reference = this.reference;
			other.title = this.title;
			other.createdAt = this.createdAt;
			other.publishedAt = this.publishedAt;
			other.updatedAt = this.updatedAt;
			other.trashed = this.trashed;
			other.trashedStatus = this.trashedStatus;
			other.authorId = this.authorId;
			other.authorType = this.authorType;
			other.authorZipCode = this.authorZipCode;
			other.Quel_est_aujourd_hui_pour_vous_le_probleme_concret_le_plus_important_dans_le_domaine_de_l_environnement__ = this.Quel_est_aujourd_hui_pour_vous_le_probleme_concret_le_plus_important_dans_le_domaine_de_l_environnement__;
			other.Que_faudrait_il_faire_selon_vous_pour_apporter_des_reponses_a_ce_probleme__ = this.Que_faudrait_il_faire_selon_vous_pour_apporter_des_reponses_a_ce_probleme__;
			other.Diriez_vous_que_votre_vie_quotidienne_est_aujourd_hui_touchee_par_le_changement_climatique__ = this.Diriez_vous_que_votre_vie_quotidienne_est_aujourd_hui_touchee_par_le_changement_climatique__;
			other.Si_oui__de_quelle_maniere_votre_vie_quotidienne_est_elle_touchee_par_le_changement_climatique__ = this.Si_oui__de_quelle_maniere_votre_vie_quotidienne_est_elle_touchee_par_le_changement_climatique__;
			other.A_titre_personnel__pensez_vous_pouvoir_contribuer_a_proteger_l_environnement__ = this.A_titre_personnel__pensez_vous_pouvoir_contribuer_a_proteger_l_environnement__;
			other.Si_oui__que_faites_vous_aujourd_hui_pour_proteger_l_environnement_et_ou_que_pourriez_vous_faire__ = this.Si_oui__que_faites_vous_aujourd_hui_pour_proteger_l_environnement_et_ou_que_pourriez_vous_faire__;
			other.Qu_est_ce_qui_pourrait_vous_inciter_a_changer_vos_comportements_comme_par_exemple_mieux_entretenir_et_regler_votre_chauffage__modifier_votre_maniere_de_conduire_ou_renoncer_a_prendre_votre_vehicule_pour_de_tres_petites_distances__ = this.Qu_est_ce_qui_pourrait_vous_inciter_a_changer_vos_comportements_comme_par_exemple_mieux_entretenir_et_regler_votre_chauffage__modifier_votre_maniere_de_conduire_ou_renoncer_a_prendre_votre_vehicule_pour_de_tres_petites_distances__;
			other.Quelles_seraient_pour_vous_les_solutions_les_plus_simples_et_les_plus_supportables_sur_un_plan_financier_pour_vous_inciter_a_changer_vos_comportements__ = this.Quelles_seraient_pour_vous_les_solutions_les_plus_simples_et_les_plus_supportables_sur_un_plan_financier_pour_vous_inciter_a_changer_vos_comportements__;
			other.Par_rapport_a_votre_mode_de_chauffage_actuel__pensez_vous_qu_il_existe_des_solutions_alternatives_plus_ecologiques__ = this.Par_rapport_a_votre_mode_de_chauffage_actuel__pensez_vous_qu_il_existe_des_solutions_alternatives_plus_ecologiques__;
			other.Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_changer_de_mode_de_chauffage__ = this.Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_changer_de_mode_de_chauffage__;
			other.Avez_vous_pour_vos_deplacements_quotidiens_la_possibilite_de_recourir_a_des_solutions_de_mobilite_alternatives_a_la_voiture_individuelle_comme_les_transports_en_commun__le_covoiturage__l_auto_partage__le_transport_a_la_demande__le_velo__etc___ = this.Avez_vous_pour_vos_deplacements_quotidiens_la_possibilite_de_recourir_a_des_solutions_de_mobilite_alternatives_a_la_voiture_individuelle_comme_les_transports_en_commun__le_covoiturage__l_auto_partage__le_transport_a_la_demande__le_velo__etc___;
			other.Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_utiliser_ces_solutions_alternatives__ = this.Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_utiliser_ces_solutions_alternatives__;
			other.Si_non__quelles_sont_les_solutions_de_mobilite_alternatives_que_vous_souhaiteriez_pouvoir_utiliser__ = this.Si_non__quelles_sont_les_solutions_de_mobilite_alternatives_que_vous_souhaiteriez_pouvoir_utiliser__;
			other.Et_qui_doit_selon_vous_se_charger_de_vous_proposer_ce_type_de_solutions_alternatives__ = this.Et_qui_doit_selon_vous_se_charger_de_vous_proposer_ce_type_de_solutions_alternatives__;
			other.Que_pourrait_faire_la_France_pour_faire_partager_ses_choix_en_matiere_d_environnement_au_niveau_europeen_et_international__ = this.Que_pourrait_faire_la_France_pour_faire_partager_ses_choix_en_matiere_d_environnement_au_niveau_europeen_et_international__;
			other.Y_a_t_il_d_autres_points_sur_la_transition_ecologique_sur_lesquels_vous_souhaiteriez_vous_exprimer__ = this.Y_a_t_il_d_autres_points_sur_la_transition_ecologique_sur_lesquels_vous_souhaiteriez_vous_exprimer__;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.theme = this.theme;
			other.reference = this.reference;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEBAT_NATIONAL_kafka2cassandra.length) {
					if (length < 1024 && commonByteArray_DEBAT_NATIONAL_kafka2cassandra.length == 0) {
						commonByteArray_DEBAT_NATIONAL_kafka2cassandra = new byte[1024];
					} else {
						commonByteArray_DEBAT_NATIONAL_kafka2cassandra = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEBAT_NATIONAL_kafka2cassandra, 0, length);
				strReturn = new String(commonByteArray_DEBAT_NATIONAL_kafka2cassandra, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEBAT_NATIONAL_kafka2cassandra) {

				try {

					int length = 0;

					this.theme = readString(dis);

					this.id = readString(dis);

					this.reference = readString(dis);

					this.title = readString(dis);

					this.createdAt = readDate(dis);

					this.publishedAt = readDate(dis);

					this.updatedAt = readDate(dis);

					this.trashed = readString(dis);

					this.trashedStatus = readString(dis);

					this.authorId = readString(dis);

					this.authorType = readString(dis);

					this.authorZipCode = readString(dis);

					this.Quel_est_aujourd_hui_pour_vous_le_probleme_concret_le_plus_important_dans_le_domaine_de_l_environnement__ = readString(
							dis);

					this.Que_faudrait_il_faire_selon_vous_pour_apporter_des_reponses_a_ce_probleme__ = readString(dis);

					this.Diriez_vous_que_votre_vie_quotidienne_est_aujourd_hui_touchee_par_le_changement_climatique__ = readString(
							dis);

					this.Si_oui__de_quelle_maniere_votre_vie_quotidienne_est_elle_touchee_par_le_changement_climatique__ = readString(
							dis);

					this.A_titre_personnel__pensez_vous_pouvoir_contribuer_a_proteger_l_environnement__ = readString(
							dis);

					this.Si_oui__que_faites_vous_aujourd_hui_pour_proteger_l_environnement_et_ou_que_pourriez_vous_faire__ = readString(
							dis);

					this.Qu_est_ce_qui_pourrait_vous_inciter_a_changer_vos_comportements_comme_par_exemple_mieux_entretenir_et_regler_votre_chauffage__modifier_votre_maniere_de_conduire_ou_renoncer_a_prendre_votre_vehicule_pour_de_tres_petites_distances__ = readString(
							dis);

					this.Quelles_seraient_pour_vous_les_solutions_les_plus_simples_et_les_plus_supportables_sur_un_plan_financier_pour_vous_inciter_a_changer_vos_comportements__ = readString(
							dis);

					this.Par_rapport_a_votre_mode_de_chauffage_actuel__pensez_vous_qu_il_existe_des_solutions_alternatives_plus_ecologiques__ = readString(
							dis);

					this.Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_changer_de_mode_de_chauffage__ = readString(
							dis);

					this.Avez_vous_pour_vos_deplacements_quotidiens_la_possibilite_de_recourir_a_des_solutions_de_mobilite_alternatives_a_la_voiture_individuelle_comme_les_transports_en_commun__le_covoiturage__l_auto_partage__le_transport_a_la_demande__le_velo__etc___ = readString(
							dis);

					this.Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_utiliser_ces_solutions_alternatives__ = readString(
							dis);

					this.Si_non__quelles_sont_les_solutions_de_mobilite_alternatives_que_vous_souhaiteriez_pouvoir_utiliser__ = readString(
							dis);

					this.Et_qui_doit_selon_vous_se_charger_de_vous_proposer_ce_type_de_solutions_alternatives__ = readString(
							dis);

					this.Que_pourrait_faire_la_France_pour_faire_partager_ses_choix_en_matiere_d_environnement_au_niveau_europeen_et_international__ = readString(
							dis);

					this.Y_a_t_il_d_autres_points_sur_la_transition_ecologique_sur_lesquels_vous_souhaiteriez_vous_exprimer__ = readString(
							dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.theme, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.reference, dos);

				// String

				writeString(this.title, dos);

				// java.util.Date

				writeDate(this.createdAt, dos);

				// java.util.Date

				writeDate(this.publishedAt, dos);

				// java.util.Date

				writeDate(this.updatedAt, dos);

				// String

				writeString(this.trashed, dos);

				// String

				writeString(this.trashedStatus, dos);

				// String

				writeString(this.authorId, dos);

				// String

				writeString(this.authorType, dos);

				// String

				writeString(this.authorZipCode, dos);

				// String

				writeString(
						this.Quel_est_aujourd_hui_pour_vous_le_probleme_concret_le_plus_important_dans_le_domaine_de_l_environnement__,
						dos);

				// String

				writeString(this.Que_faudrait_il_faire_selon_vous_pour_apporter_des_reponses_a_ce_probleme__, dos);

				// String

				writeString(
						this.Diriez_vous_que_votre_vie_quotidienne_est_aujourd_hui_touchee_par_le_changement_climatique__,
						dos);

				// String

				writeString(
						this.Si_oui__de_quelle_maniere_votre_vie_quotidienne_est_elle_touchee_par_le_changement_climatique__,
						dos);

				// String

				writeString(this.A_titre_personnel__pensez_vous_pouvoir_contribuer_a_proteger_l_environnement__, dos);

				// String

				writeString(
						this.Si_oui__que_faites_vous_aujourd_hui_pour_proteger_l_environnement_et_ou_que_pourriez_vous_faire__,
						dos);

				// String

				writeString(
						this.Qu_est_ce_qui_pourrait_vous_inciter_a_changer_vos_comportements_comme_par_exemple_mieux_entretenir_et_regler_votre_chauffage__modifier_votre_maniere_de_conduire_ou_renoncer_a_prendre_votre_vehicule_pour_de_tres_petites_distances__,
						dos);

				// String

				writeString(
						this.Quelles_seraient_pour_vous_les_solutions_les_plus_simples_et_les_plus_supportables_sur_un_plan_financier_pour_vous_inciter_a_changer_vos_comportements__,
						dos);

				// String

				writeString(
						this.Par_rapport_a_votre_mode_de_chauffage_actuel__pensez_vous_qu_il_existe_des_solutions_alternatives_plus_ecologiques__,
						dos);

				// String

				writeString(
						this.Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_changer_de_mode_de_chauffage__,
						dos);

				// String

				writeString(
						this.Avez_vous_pour_vos_deplacements_quotidiens_la_possibilite_de_recourir_a_des_solutions_de_mobilite_alternatives_a_la_voiture_individuelle_comme_les_transports_en_commun__le_covoiturage__l_auto_partage__le_transport_a_la_demande__le_velo__etc___,
						dos);

				// String

				writeString(
						this.Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_utiliser_ces_solutions_alternatives__,
						dos);

				// String

				writeString(
						this.Si_non__quelles_sont_les_solutions_de_mobilite_alternatives_que_vous_souhaiteriez_pouvoir_utiliser__,
						dos);

				// String

				writeString(this.Et_qui_doit_selon_vous_se_charger_de_vous_proposer_ce_type_de_solutions_alternatives__,
						dos);

				// String

				writeString(
						this.Que_pourrait_faire_la_France_pour_faire_partager_ses_choix_en_matiere_d_environnement_au_niveau_europeen_et_international__,
						dos);

				// String

				writeString(
						this.Y_a_t_il_d_autres_points_sur_la_transition_ecologique_sur_lesquels_vous_souhaiteriez_vous_exprimer__,
						dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("theme=" + theme);
			sb.append(",id=" + id);
			sb.append(",reference=" + reference);
			sb.append(",title=" + title);
			sb.append(",createdAt=" + String.valueOf(createdAt));
			sb.append(",publishedAt=" + String.valueOf(publishedAt));
			sb.append(",updatedAt=" + String.valueOf(updatedAt));
			sb.append(",trashed=" + trashed);
			sb.append(",trashedStatus=" + trashedStatus);
			sb.append(",authorId=" + authorId);
			sb.append(",authorType=" + authorType);
			sb.append(",authorZipCode=" + authorZipCode);
			sb.append(
					",Quel_est_aujourd_hui_pour_vous_le_probleme_concret_le_plus_important_dans_le_domaine_de_l_environnement__="
							+ Quel_est_aujourd_hui_pour_vous_le_probleme_concret_le_plus_important_dans_le_domaine_de_l_environnement__);
			sb.append(",Que_faudrait_il_faire_selon_vous_pour_apporter_des_reponses_a_ce_probleme__="
					+ Que_faudrait_il_faire_selon_vous_pour_apporter_des_reponses_a_ce_probleme__);
			sb.append(",Diriez_vous_que_votre_vie_quotidienne_est_aujourd_hui_touchee_par_le_changement_climatique__="
					+ Diriez_vous_que_votre_vie_quotidienne_est_aujourd_hui_touchee_par_le_changement_climatique__);
			sb.append(
					",Si_oui__de_quelle_maniere_votre_vie_quotidienne_est_elle_touchee_par_le_changement_climatique__="
							+ Si_oui__de_quelle_maniere_votre_vie_quotidienne_est_elle_touchee_par_le_changement_climatique__);
			sb.append(",A_titre_personnel__pensez_vous_pouvoir_contribuer_a_proteger_l_environnement__="
					+ A_titre_personnel__pensez_vous_pouvoir_contribuer_a_proteger_l_environnement__);
			sb.append(
					",Si_oui__que_faites_vous_aujourd_hui_pour_proteger_l_environnement_et_ou_que_pourriez_vous_faire__="
							+ Si_oui__que_faites_vous_aujourd_hui_pour_proteger_l_environnement_et_ou_que_pourriez_vous_faire__);
			sb.append(
					",Qu_est_ce_qui_pourrait_vous_inciter_a_changer_vos_comportements_comme_par_exemple_mieux_entretenir_et_regler_votre_chauffage__modifier_votre_maniere_de_conduire_ou_renoncer_a_prendre_votre_vehicule_pour_de_tres_petites_distances__="
							+ Qu_est_ce_qui_pourrait_vous_inciter_a_changer_vos_comportements_comme_par_exemple_mieux_entretenir_et_regler_votre_chauffage__modifier_votre_maniere_de_conduire_ou_renoncer_a_prendre_votre_vehicule_pour_de_tres_petites_distances__);
			sb.append(
					",Quelles_seraient_pour_vous_les_solutions_les_plus_simples_et_les_plus_supportables_sur_un_plan_financier_pour_vous_inciter_a_changer_vos_comportements__="
							+ Quelles_seraient_pour_vous_les_solutions_les_plus_simples_et_les_plus_supportables_sur_un_plan_financier_pour_vous_inciter_a_changer_vos_comportements__);
			sb.append(
					",Par_rapport_a_votre_mode_de_chauffage_actuel__pensez_vous_qu_il_existe_des_solutions_alternatives_plus_ecologiques__="
							+ Par_rapport_a_votre_mode_de_chauffage_actuel__pensez_vous_qu_il_existe_des_solutions_alternatives_plus_ecologiques__);
			sb.append(
					",Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_changer_de_mode_de_chauffage__="
							+ Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_changer_de_mode_de_chauffage__);
			sb.append(
					",Avez_vous_pour_vos_deplacements_quotidiens_la_possibilite_de_recourir_a_des_solutions_de_mobilite_alternatives_a_la_voiture_individuelle_comme_les_transports_en_commun__le_covoiturage__l_auto_partage__le_transport_a_la_demande__le_velo__etc___="
							+ Avez_vous_pour_vos_deplacements_quotidiens_la_possibilite_de_recourir_a_des_solutions_de_mobilite_alternatives_a_la_voiture_individuelle_comme_les_transports_en_commun__le_covoiturage__l_auto_partage__le_transport_a_la_demande__le_velo__etc___);
			sb.append(
					",Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_utiliser_ces_solutions_alternatives__="
							+ Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_utiliser_ces_solutions_alternatives__);
			sb.append(
					",Si_non__quelles_sont_les_solutions_de_mobilite_alternatives_que_vous_souhaiteriez_pouvoir_utiliser__="
							+ Si_non__quelles_sont_les_solutions_de_mobilite_alternatives_que_vous_souhaiteriez_pouvoir_utiliser__);
			sb.append(",Et_qui_doit_selon_vous_se_charger_de_vous_proposer_ce_type_de_solutions_alternatives__="
					+ Et_qui_doit_selon_vous_se_charger_de_vous_proposer_ce_type_de_solutions_alternatives__);
			sb.append(
					",Que_pourrait_faire_la_France_pour_faire_partager_ses_choix_en_matiere_d_environnement_au_niveau_europeen_et_international__="
							+ Que_pourrait_faire_la_France_pour_faire_partager_ses_choix_en_matiere_d_environnement_au_niveau_europeen_et_international__);
			sb.append(
					",Y_a_t_il_d_autres_points_sur_la_transition_ecologique_sur_lesquels_vous_souhaiteriez_vous_exprimer__="
							+ Y_a_t_il_d_autres_points_sur_la_transition_ecologique_sur_lesquels_vous_souhaiteriez_vous_exprimer__);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.theme, other.theme);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.reference, other.reference);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DEBAT_NATIONAL_kafka2cassandra = new byte[0];
		static byte[] commonByteArray_DEBAT_NATIONAL_kafka2cassandra = new byte[0];

		public String payload;

		public String getPayload() {
			return this.payload;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEBAT_NATIONAL_kafka2cassandra.length) {
					if (length < 1024 && commonByteArray_DEBAT_NATIONAL_kafka2cassandra.length == 0) {
						commonByteArray_DEBAT_NATIONAL_kafka2cassandra = new byte[1024];
					} else {
						commonByteArray_DEBAT_NATIONAL_kafka2cassandra = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEBAT_NATIONAL_kafka2cassandra, 0, length);
				strReturn = new String(commonByteArray_DEBAT_NATIONAL_kafka2cassandra, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEBAT_NATIONAL_kafka2cassandra) {

				try {

					int length = 0;

					this.payload = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.payload, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("payload=" + payload);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tKafkaInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tKafkaInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();

				/**
				 * [tCassandraOutput_1 begin ] start
				 */

				ok_Hash.put("tCassandraOutput_1", false);
				start_Hash.put("tCassandraOutput_1", System.currentTimeMillis());

				currentComponent = "tCassandraOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tCassandraOutput_1 = 0;

				com.datastax.driver.core.Cluster cluster_tCassandraOutput_1 = (com.datastax.driver.core.Cluster) globalMap
						.get("cluster_tCassandraConnection_1");
				com.datastax.driver.core.Session connection_tCassandraOutput_1 = (com.datastax.driver.core.Session) globalMap
						.get("connection_tCassandraConnection_1");

				connection_tCassandraOutput_1
						.execute("DROP KEYSPACE IF EXISTS " + StringHandling.DQUOTE(context.keyspace));
				connection_tCassandraOutput_1.execute("CREATE KEYSPACE " + StringHandling.DQUOTE(context.keyspace)
						+ "WITH REPLICATION = {'class' : 'SimpleStrategy','replication_factor' : " + 3 + "}");

				connection_tCassandraOutput_1.execute("DROP TABLE IF EXISTS " + StringHandling.DQUOTE(context.keyspace)
						+ "." + StringHandling.DQUOTE(context.column_family));
				connection_tCassandraOutput_1.execute("CREATE TABLE " + StringHandling.DQUOTE(context.keyspace) + "."
						+ StringHandling.DQUOTE(context.column_family)
						+ "(theme varchar,reference varchar,id varchar,title varchar,\"createdAt\" timestamp,\"publishedAt\" timestamp,\"updatedAt\" timestamp,trashed varchar,\"trashedStatus\" varchar,\"authorId\" varchar,\"authorType\" varchar,\"authorZipCode\" varchar,\"Quel_est_aujourd_hui_pour_vous_le_probleme_concret_le_plus_important_dans_le_domaine_de_l_environnement__\" varchar,\"Que_faudrait_il_faire_selon_vous_pour_apporter_des_reponses_a_ce_probleme__\" varchar,\"Diriez_vous_que_votre_vie_quotidienne_est_aujourd_hui_touchee_par_le_changement_climatique__\" varchar,\"Si_oui__de_quelle_maniere_votre_vie_quotidienne_est_elle_touchee_par_le_changement_climatique__\" varchar,\"A_titre_personnel__pensez_vous_pouvoir_contribuer_a_proteger_l_environnement__\" varchar,\"Si_oui__que_faites_vous_aujourd_hui_pour_proteger_l_environnement_et_ou_que_pourriez_vous_faire__\" varchar,\"Qu_est_ce_qui_pourrait_vous_inciter_a_changer_vos_comportements_comme_par_exemple_mieux_entretenir_et_regler_votre_chauffage__modifier_votre_maniere_de_conduire_ou_renoncer_a_prendre_votre_vehicule_pour_de_tres_petites_distances__\" varchar,\"Quelles_seraient_pour_vous_les_solutions_les_plus_simples_et_les_plus_supportables_sur_un_plan_financier_pour_vous_inciter_a_changer_vos_comportements__\" varchar,\"Par_rapport_a_votre_mode_de_chauffage_actuel__pensez_vous_qu_il_existe_des_solutions_alternatives_plus_ecologiques__\" varchar,\"Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_changer_de_mode_de_chauffage__\" varchar,\"Avez_vous_pour_vos_deplacements_quotidiens_la_possibilite_de_recourir_a_des_solutions_de_mobilite_alternatives_a_la_voiture_individuelle_comme_les_transports_en_commun__le_covoiturage__l_auto_partage__le_transport_a_la_demande__le_velo__etc___\" varchar,\"Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_utiliser_ces_solutions_alternatives__\" varchar,\"Si_non__quelles_sont_les_solutions_de_mobilite_alternatives_que_vous_souhaiteriez_pouvoir_utiliser__\" varchar,\"Et_qui_doit_selon_vous_se_charger_de_vous_proposer_ce_type_de_solutions_alternatives__\" varchar,\"Que_pourrait_faire_la_France_pour_faire_partager_ses_choix_en_matiere_d_environnement_au_niveau_europeen_et_international__\" varchar,\"Y_a_t_il_d_autres_points_sur_la_transition_ecologique_sur_lesquels_vous_souhaiteriez_vous_exprimer__\" varchar,PRIMARY KEY(theme,reference))");

				int nb_line_tCassandraOutput_1 = 0;
				com.datastax.driver.core.PreparedStatement prepareStmt_tCassandraOutput_1 = null;
				prepareStmt_tCassandraOutput_1 = connection_tCassandraOutput_1.prepare("INSERT INTO "
						+ StringHandling.DQUOTE(context.keyspace) + "." + StringHandling.DQUOTE(context.column_family)
						+ " (theme,reference,id,title,\"createdAt\",\"publishedAt\",\"updatedAt\",trashed,\"trashedStatus\",\"authorId\",\"authorType\",\"authorZipCode\",\"Quel_est_aujourd_hui_pour_vous_le_probleme_concret_le_plus_important_dans_le_domaine_de_l_environnement__\",\"Que_faudrait_il_faire_selon_vous_pour_apporter_des_reponses_a_ce_probleme__\",\"Diriez_vous_que_votre_vie_quotidienne_est_aujourd_hui_touchee_par_le_changement_climatique__\",\"Si_oui__de_quelle_maniere_votre_vie_quotidienne_est_elle_touchee_par_le_changement_climatique__\",\"A_titre_personnel__pensez_vous_pouvoir_contribuer_a_proteger_l_environnement__\",\"Si_oui__que_faites_vous_aujourd_hui_pour_proteger_l_environnement_et_ou_que_pourriez_vous_faire__\",\"Qu_est_ce_qui_pourrait_vous_inciter_a_changer_vos_comportements_comme_par_exemple_mieux_entretenir_et_regler_votre_chauffage__modifier_votre_maniere_de_conduire_ou_renoncer_a_prendre_votre_vehicule_pour_de_tres_petites_distances__\",\"Quelles_seraient_pour_vous_les_solutions_les_plus_simples_et_les_plus_supportables_sur_un_plan_financier_pour_vous_inciter_a_changer_vos_comportements__\",\"Par_rapport_a_votre_mode_de_chauffage_actuel__pensez_vous_qu_il_existe_des_solutions_alternatives_plus_ecologiques__\",\"Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_changer_de_mode_de_chauffage__\",\"Avez_vous_pour_vos_deplacements_quotidiens_la_possibilite_de_recourir_a_des_solutions_de_mobilite_alternatives_a_la_voiture_individuelle_comme_les_transports_en_commun__le_covoiturage__l_auto_partage__le_transport_a_la_demande__le_velo__etc___\",\"Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_utiliser_ces_solutions_alternatives__\",\"Si_non__quelles_sont_les_solutions_de_mobilite_alternatives_que_vous_souhaiteriez_pouvoir_utiliser__\",\"Et_qui_doit_selon_vous_se_charger_de_vous_proposer_ce_type_de_solutions_alternatives__\",\"Que_pourrait_faire_la_France_pour_faire_partager_ses_choix_en_matiere_d_environnement_au_niveau_europeen_et_international__\",\"Y_a_t_il_d_autres_points_sur_la_transition_ecologique_sur_lesquels_vous_souhaiteriez_vous_exprimer__\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
				com.datastax.driver.core.BoundStatement boundStmt_tCassandraOutput_1 = null;

				java.util.List<String> columns_tCassandraOutput_1 = new java.util.ArrayList<String>();

				columns_tCassandraOutput_1.add("theme");

				columns_tCassandraOutput_1.add("reference");

				columns_tCassandraOutput_1.add("id");

				columns_tCassandraOutput_1.add("title");

				columns_tCassandraOutput_1.add("createdAt");

				columns_tCassandraOutput_1.add("publishedAt");

				columns_tCassandraOutput_1.add("updatedAt");

				columns_tCassandraOutput_1.add("trashed");

				columns_tCassandraOutput_1.add("trashedStatus");

				columns_tCassandraOutput_1.add("authorId");

				columns_tCassandraOutput_1.add("authorType");

				columns_tCassandraOutput_1.add("authorZipCode");

				columns_tCassandraOutput_1.add(
						"Quel_est_aujourd_hui_pour_vous_le_probleme_concret_le_plus_important_dans_le_domaine_de_l_environnement__");

				columns_tCassandraOutput_1
						.add("Que_faudrait_il_faire_selon_vous_pour_apporter_des_reponses_a_ce_probleme__");

				columns_tCassandraOutput_1.add(
						"Diriez_vous_que_votre_vie_quotidienne_est_aujourd_hui_touchee_par_le_changement_climatique__");

				columns_tCassandraOutput_1.add(
						"Si_oui__de_quelle_maniere_votre_vie_quotidienne_est_elle_touchee_par_le_changement_climatique__");

				columns_tCassandraOutput_1
						.add("A_titre_personnel__pensez_vous_pouvoir_contribuer_a_proteger_l_environnement__");

				columns_tCassandraOutput_1.add(
						"Si_oui__que_faites_vous_aujourd_hui_pour_proteger_l_environnement_et_ou_que_pourriez_vous_faire__");

				columns_tCassandraOutput_1.add(
						"Qu_est_ce_qui_pourrait_vous_inciter_a_changer_vos_comportements_comme_par_exemple_mieux_entretenir_et_regler_votre_chauffage__modifier_votre_maniere_de_conduire_ou_renoncer_a_prendre_votre_vehicule_pour_de_tres_petites_distances__");

				columns_tCassandraOutput_1.add(
						"Quelles_seraient_pour_vous_les_solutions_les_plus_simples_et_les_plus_supportables_sur_un_plan_financier_pour_vous_inciter_a_changer_vos_comportements__");

				columns_tCassandraOutput_1.add(
						"Par_rapport_a_votre_mode_de_chauffage_actuel__pensez_vous_qu_il_existe_des_solutions_alternatives_plus_ecologiques__");

				columns_tCassandraOutput_1.add(
						"Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_changer_de_mode_de_chauffage__");

				columns_tCassandraOutput_1.add(
						"Avez_vous_pour_vos_deplacements_quotidiens_la_possibilite_de_recourir_a_des_solutions_de_mobilite_alternatives_a_la_voiture_individuelle_comme_les_transports_en_commun__le_covoiturage__l_auto_partage__le_transport_a_la_demande__le_velo__etc___");

				columns_tCassandraOutput_1.add(
						"Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_utiliser_ces_solutions_alternatives__");

				columns_tCassandraOutput_1.add(
						"Si_non__quelles_sont_les_solutions_de_mobilite_alternatives_que_vous_souhaiteriez_pouvoir_utiliser__");

				columns_tCassandraOutput_1
						.add("Et_qui_doit_selon_vous_se_charger_de_vous_proposer_ce_type_de_solutions_alternatives__");

				columns_tCassandraOutput_1.add(
						"Que_pourrait_faire_la_France_pour_faire_partager_ses_choix_en_matiere_d_environnement_au_niveau_europeen_et_international__");

				columns_tCassandraOutput_1.add(
						"Y_a_t_il_d_autres_points_sur_la_transition_ecologique_sur_lesquels_vous_souhaiteriez_vous_exprimer__");

				org.talend.bigdata.cassandra.BatchExecutor cassandraBatchExec_tCassandraOutput_1 = new org.talend.bigdata.cassandra.BatchExecutor(
						connection_tCassandraOutput_1, StringHandling.DQUOTE(context.keyspace),
						StringHandling.DQUOTE(context.column_family), columns_tCassandraOutput_1,
						org.talend.bigdata.cassandra.BatchGroupingKey.fromString("PARTITION"), 1000, true, 5);

				/**
				 * [tCassandraOutput_1 begin ] stop
				 */

				/**
				 * [tExtractJSONFields_1 begin ] start
				 */

				ok_Hash.put("tExtractJSONFields_1", false);
				start_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());

				currentComponent = "tExtractJSONFields_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tExtractJSONFields_1 = 0;

				int nb_line_tExtractJSONFields_1 = 0;
				String jsonStr_tExtractJSONFields_1 = "";

				class JsonPathCache_tExtractJSONFields_1 {
					final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

					public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
						if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
							return jsonPathString2compiledJsonPath.get(jsonPath);
						} else {
							com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
									.compile(jsonPath);
							jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
							return compiledLoopPath;
						}
					}
				}

				JsonPathCache_tExtractJSONFields_1 jsonPathCache_tExtractJSONFields_1 = new JsonPathCache_tExtractJSONFields_1();

				/**
				 * [tExtractJSONFields_1 begin ] stop
				 */

				/**
				 * [tKafkaInput_1 begin ] start
				 */

				ok_Hash.put("tKafkaInput_1", false);
				start_Hash.put("tKafkaInput_1", System.currentTimeMillis());

				currentComponent = "tKafkaInput_1";

				int tos_count_tKafkaInput_1 = 0;

				class tKafkaInput_1_ValueDeserializer
						implements org.apache.kafka.common.serialization.Deserializer<row1Struct> {

					private org.apache.kafka.common.serialization.StringDeserializer stringDeserializer;

					public void configure(java.util.Map<java.lang.String, ?> configs, boolean isKey) {
						stringDeserializer = new org.apache.kafka.common.serialization.StringDeserializer();
						stringDeserializer.configure(configs, isKey);
					}

					public row1Struct deserialize(String topic, byte[] data) {
						row1Struct result = new row1Struct();
						String line = stringDeserializer.deserialize(topic, data);
						result.payload = line;
						return result;
					}

					public void close() {
						// nothing
					}
				}

				class tKafkaInput_1_KeyDeserializer
						implements org.apache.kafka.common.serialization.Deserializer<byte[]> {

					public void configure(java.util.Map<java.lang.String, ?> configs, boolean isKey) {
						// nothing
					}

					public byte[] deserialize(String topic, byte[] data) {
						return data;
					}

					public void close() {
						// nothing
					}
				}

// Consumer configuration
				java.util.Properties tKafkaInput_1_kafkaProperties = new java.util.Properties();
				tKafkaInput_1_kafkaProperties.put("auto.commit.interval.ms", "5000");
				tKafkaInput_1_kafkaProperties.put("auto.offset.reset", "earliest");
				tKafkaInput_1_kafkaProperties.put("bootstrap.servers", context.kafka_host);
				tKafkaInput_1_kafkaProperties.put("enable.auto.commit", "true");
				tKafkaInput_1_kafkaProperties.put("group.id", context.group_cassandra);
				tKafkaInput_1_kafkaProperties.put("security.protocol", "PLAINTEXT");

// Value deserializer configuration
				tKafkaInput_1_ValueDeserializer instance_tKafkaInput_1_ValueDeserializer = new tKafkaInput_1_ValueDeserializer();
				java.util.Map<String, String> instance_tKafkaInput_1_ValueDeserializer_configs = new java.util.HashMap<String, String>();
				instance_tKafkaInput_1_ValueDeserializer_configs.put("serializer.encoding", "UTF-8");
				instance_tKafkaInput_1_ValueDeserializer.configure(instance_tKafkaInput_1_ValueDeserializer_configs,
						false);

// Single-threaded consumer. Make sure the new security information is picked up.
				javax.security.auth.login.Configuration.setConfiguration(null);
				org.apache.kafka.clients.consumer.KafkaConsumer<byte[], row1Struct> tKafkaInput_1_kafkaConsumer = new org.apache.kafka.clients.consumer.KafkaConsumer<byte[], row1Struct>(
						tKafkaInput_1_kafkaProperties, new tKafkaInput_1_KeyDeserializer(),
						instance_tKafkaInput_1_ValueDeserializer);
				tKafkaInput_1_kafkaConsumer.subscribe(java.util.Arrays.asList(context.topic_cassandra));

				globalMap.put("tKafkaInput_1_kafkaConsumer", tKafkaInput_1_kafkaConsumer);

// Start consumption
				while (true) {
					try {
						// Either use a default poll timeout of 1s or the provided timeout precision.
						// The consumer won't stop if there is no record polled from the topic.
						org.apache.kafka.clients.consumer.ConsumerRecords<byte[], row1Struct> tKafkaInput_1_consumerRecords = tKafkaInput_1_kafkaConsumer
								.poll(1000);
						if (tKafkaInput_1_consumerRecords == null) {
							// Dummy condition to make sure we have a way to break the current loop,
							// regardless of the tKafkaInput configuration (compilation matter).
							break;
						}

						for (org.apache.kafka.clients.consumer.ConsumerRecord<byte[], row1Struct> tKafkaInput_1_consumerRecord : tKafkaInput_1_consumerRecords) {

							/**
							 * [tKafkaInput_1 begin ] stop
							 */

							/**
							 * [tKafkaInput_1 main ] start
							 */

							currentComponent = "tKafkaInput_1";

							row1 = tKafkaInput_1_consumerRecord.value() == null ? new row1Struct()
									: tKafkaInput_1_consumerRecord.value();

							tos_count_tKafkaInput_1++;

							/**
							 * [tKafkaInput_1 main ] stop
							 */

							/**
							 * [tKafkaInput_1 process_data_begin ] start
							 */

							currentComponent = "tKafkaInput_1";

							/**
							 * [tKafkaInput_1 process_data_begin ] stop
							 */

							/**
							 * [tExtractJSONFields_1 main ] start
							 */

							currentComponent = "tExtractJSONFields_1";

							// row1
							// row1

							if (execStat) {
								runStat.updateStatOnConnection("row1" + iterateId, 1, 1);
							}

							if (row1.payload != null) {// C_01
								jsonStr_tExtractJSONFields_1 = row1.payload.toString();

								row2 = null;

								String loopPath_tExtractJSONFields_1 = "$";
								java.util.List<Object> resultset_tExtractJSONFields_1 = new java.util.ArrayList<Object>();

								boolean isStructError_tExtractJSONFields_1 = true;
								com.jayway.jsonpath.ReadContext document_tExtractJSONFields_1 = null;
								try {
									document_tExtractJSONFields_1 = com.jayway.jsonpath.JsonPath
											.parse(jsonStr_tExtractJSONFields_1);
									com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(loopPath_tExtractJSONFields_1);
									Object result_tExtractJSONFields_1 = document_tExtractJSONFields_1.read(
											compiledLoopPath_tExtractJSONFields_1, net.minidev.json.JSONObject.class);
									if (result_tExtractJSONFields_1 instanceof net.minidev.json.JSONArray) {
										resultset_tExtractJSONFields_1 = (net.minidev.json.JSONArray) result_tExtractJSONFields_1;
									} else {
										resultset_tExtractJSONFields_1.add(result_tExtractJSONFields_1);
									}

									isStructError_tExtractJSONFields_1 = false;
								} catch (java.lang.Exception ex_tExtractJSONFields_1) {
									System.err.println(ex_tExtractJSONFields_1.getMessage());
								}

								String jsonPath_tExtractJSONFields_1 = null;
								com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_1 = null;

								Object value_tExtractJSONFields_1 = null;

								Object root_tExtractJSONFields_1 = null;
								for (int i_tExtractJSONFields_1 = 0; isStructError_tExtractJSONFields_1
										|| (i_tExtractJSONFields_1 < resultset_tExtractJSONFields_1
												.size()); i_tExtractJSONFields_1++) {
									if (!isStructError_tExtractJSONFields_1) {
										Object row_tExtractJSONFields_1 = resultset_tExtractJSONFields_1
												.get(i_tExtractJSONFields_1);
										row2 = null;
										row2 = new row2Struct();
										nb_line_tExtractJSONFields_1++;
										try {
											jsonPath_tExtractJSONFields_1 = "theme";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
													if (root_tExtractJSONFields_1 == null) {
														root_tExtractJSONFields_1 = document_tExtractJSONFields_1
																.read(jsonPathCache_tExtractJSONFields_1
																		.getCompiledJsonPath("$"));
													}
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(root_tExtractJSONFields_1);
												} else {
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(row_tExtractJSONFields_1);
												}
												row2.theme = value_tExtractJSONFields_1 == null ?

														null

														: value_tExtractJSONFields_1.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row2.theme =

														null

												;
											}
											jsonPath_tExtractJSONFields_1 = "id";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
													if (root_tExtractJSONFields_1 == null) {
														root_tExtractJSONFields_1 = document_tExtractJSONFields_1
																.read(jsonPathCache_tExtractJSONFields_1
																		.getCompiledJsonPath("$"));
													}
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(root_tExtractJSONFields_1);
												} else {
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(row_tExtractJSONFields_1);
												}
												row2.id = value_tExtractJSONFields_1 == null ?

														null

														: value_tExtractJSONFields_1.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row2.id =

														null

												;
											}
											jsonPath_tExtractJSONFields_1 = "reference";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
													if (root_tExtractJSONFields_1 == null) {
														root_tExtractJSONFields_1 = document_tExtractJSONFields_1
																.read(jsonPathCache_tExtractJSONFields_1
																		.getCompiledJsonPath("$"));
													}
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(root_tExtractJSONFields_1);
												} else {
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(row_tExtractJSONFields_1);
												}
												row2.reference = value_tExtractJSONFields_1 == null ?

														null

														: value_tExtractJSONFields_1.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row2.reference =

														null

												;
											}
											jsonPath_tExtractJSONFields_1 = "title";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
													if (root_tExtractJSONFields_1 == null) {
														root_tExtractJSONFields_1 = document_tExtractJSONFields_1
																.read(jsonPathCache_tExtractJSONFields_1
																		.getCompiledJsonPath("$"));
													}
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(root_tExtractJSONFields_1);
												} else {
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(row_tExtractJSONFields_1);
												}
												row2.title = value_tExtractJSONFields_1 == null ?

														null

														: value_tExtractJSONFields_1.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row2.title =

														null

												;
											}
											jsonPath_tExtractJSONFields_1 = "createdAt";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
													if (root_tExtractJSONFields_1 == null) {
														root_tExtractJSONFields_1 = document_tExtractJSONFields_1
																.read(jsonPathCache_tExtractJSONFields_1
																		.getCompiledJsonPath("$"));
													}
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(root_tExtractJSONFields_1);
												} else {
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(row_tExtractJSONFields_1);
												}
												if (value_tExtractJSONFields_1 != null
														&& !value_tExtractJSONFields_1.toString().isEmpty()) {
													row2.createdAt = ParserUtils.parseTo_Date(
															value_tExtractJSONFields_1.toString(),
															"yyyy-MM-dd HH:mm:ss");
												} else {
													row2.createdAt =

															null

													;
												}
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row2.createdAt =

														null

												;
											}
											jsonPath_tExtractJSONFields_1 = "publishedAt";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
													if (root_tExtractJSONFields_1 == null) {
														root_tExtractJSONFields_1 = document_tExtractJSONFields_1
																.read(jsonPathCache_tExtractJSONFields_1
																		.getCompiledJsonPath("$"));
													}
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(root_tExtractJSONFields_1);
												} else {
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(row_tExtractJSONFields_1);
												}
												if (value_tExtractJSONFields_1 != null
														&& !value_tExtractJSONFields_1.toString().isEmpty()) {
													row2.publishedAt = ParserUtils.parseTo_Date(
															value_tExtractJSONFields_1.toString(),
															"yyyy-MM-dd HH:mm:ss");
												} else {
													row2.publishedAt =

															null

													;
												}
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row2.publishedAt =

														null

												;
											}
											jsonPath_tExtractJSONFields_1 = "updatedAt";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
													if (root_tExtractJSONFields_1 == null) {
														root_tExtractJSONFields_1 = document_tExtractJSONFields_1
																.read(jsonPathCache_tExtractJSONFields_1
																		.getCompiledJsonPath("$"));
													}
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(root_tExtractJSONFields_1);
												} else {
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(row_tExtractJSONFields_1);
												}
												if (value_tExtractJSONFields_1 != null
														&& !value_tExtractJSONFields_1.toString().isEmpty()) {
													row2.updatedAt = ParserUtils.parseTo_Date(
															value_tExtractJSONFields_1.toString(),
															"yyyy-MM-dd HH:mm:ss");
												} else {
													row2.updatedAt =

															null

													;
												}
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row2.updatedAt =

														null

												;
											}
											jsonPath_tExtractJSONFields_1 = "trashed";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
													if (root_tExtractJSONFields_1 == null) {
														root_tExtractJSONFields_1 = document_tExtractJSONFields_1
																.read(jsonPathCache_tExtractJSONFields_1
																		.getCompiledJsonPath("$"));
													}
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(root_tExtractJSONFields_1);
												} else {
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(row_tExtractJSONFields_1);
												}
												row2.trashed = value_tExtractJSONFields_1 == null ?

														null

														: value_tExtractJSONFields_1.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row2.trashed =

														null

												;
											}
											jsonPath_tExtractJSONFields_1 = "trashedStatus";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
													if (root_tExtractJSONFields_1 == null) {
														root_tExtractJSONFields_1 = document_tExtractJSONFields_1
																.read(jsonPathCache_tExtractJSONFields_1
																		.getCompiledJsonPath("$"));
													}
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(root_tExtractJSONFields_1);
												} else {
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(row_tExtractJSONFields_1);
												}
												row2.trashedStatus = value_tExtractJSONFields_1 == null ?

														null

														: value_tExtractJSONFields_1.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row2.trashedStatus =

														null

												;
											}
											jsonPath_tExtractJSONFields_1 = "authorId";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
													if (root_tExtractJSONFields_1 == null) {
														root_tExtractJSONFields_1 = document_tExtractJSONFields_1
																.read(jsonPathCache_tExtractJSONFields_1
																		.getCompiledJsonPath("$"));
													}
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(root_tExtractJSONFields_1);
												} else {
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(row_tExtractJSONFields_1);
												}
												row2.authorId = value_tExtractJSONFields_1 == null ?

														null

														: value_tExtractJSONFields_1.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row2.authorId =

														null

												;
											}
											jsonPath_tExtractJSONFields_1 = "authorType";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
													if (root_tExtractJSONFields_1 == null) {
														root_tExtractJSONFields_1 = document_tExtractJSONFields_1
																.read(jsonPathCache_tExtractJSONFields_1
																		.getCompiledJsonPath("$"));
													}
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(root_tExtractJSONFields_1);
												} else {
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(row_tExtractJSONFields_1);
												}
												row2.authorType = value_tExtractJSONFields_1 == null ?

														null

														: value_tExtractJSONFields_1.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row2.authorType =

														null

												;
											}
											jsonPath_tExtractJSONFields_1 = "authorZipCode";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
													if (root_tExtractJSONFields_1 == null) {
														root_tExtractJSONFields_1 = document_tExtractJSONFields_1
																.read(jsonPathCache_tExtractJSONFields_1
																		.getCompiledJsonPath("$"));
													}
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(root_tExtractJSONFields_1);
												} else {
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(row_tExtractJSONFields_1);
												}
												row2.authorZipCode = value_tExtractJSONFields_1 == null ?

														null

														: value_tExtractJSONFields_1.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row2.authorZipCode =

														null

												;
											}
											jsonPath_tExtractJSONFields_1 = "Quel_est_aujourd_hui_pour_vous_le_probleme_concret_le_plus_important_dans_le_domaine_de_l_environnement__";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
													if (root_tExtractJSONFields_1 == null) {
														root_tExtractJSONFields_1 = document_tExtractJSONFields_1
																.read(jsonPathCache_tExtractJSONFields_1
																		.getCompiledJsonPath("$"));
													}
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(root_tExtractJSONFields_1);
												} else {
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(row_tExtractJSONFields_1);
												}
												row2.Quel_est_aujourd_hui_pour_vous_le_probleme_concret_le_plus_important_dans_le_domaine_de_l_environnement__ = value_tExtractJSONFields_1 == null
														?

														null

														: value_tExtractJSONFields_1.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row2.Quel_est_aujourd_hui_pour_vous_le_probleme_concret_le_plus_important_dans_le_domaine_de_l_environnement__ =

														null

												;
											}
											jsonPath_tExtractJSONFields_1 = "Que_faudrait_il_faire_selon_vous_pour_apporter_des_reponses_a_ce_probleme__";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
													if (root_tExtractJSONFields_1 == null) {
														root_tExtractJSONFields_1 = document_tExtractJSONFields_1
																.read(jsonPathCache_tExtractJSONFields_1
																		.getCompiledJsonPath("$"));
													}
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(root_tExtractJSONFields_1);
												} else {
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(row_tExtractJSONFields_1);
												}
												row2.Que_faudrait_il_faire_selon_vous_pour_apporter_des_reponses_a_ce_probleme__ = value_tExtractJSONFields_1 == null
														?

														null

														: value_tExtractJSONFields_1.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row2.Que_faudrait_il_faire_selon_vous_pour_apporter_des_reponses_a_ce_probleme__ =

														null

												;
											}
											jsonPath_tExtractJSONFields_1 = "Diriez_vous_que_votre_vie_quotidienne_est_aujourd_hui_touchee_par_le_changement_climatique__";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
													if (root_tExtractJSONFields_1 == null) {
														root_tExtractJSONFields_1 = document_tExtractJSONFields_1
																.read(jsonPathCache_tExtractJSONFields_1
																		.getCompiledJsonPath("$"));
													}
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(root_tExtractJSONFields_1);
												} else {
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(row_tExtractJSONFields_1);
												}
												row2.Diriez_vous_que_votre_vie_quotidienne_est_aujourd_hui_touchee_par_le_changement_climatique__ = value_tExtractJSONFields_1 == null
														?

														null

														: value_tExtractJSONFields_1.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row2.Diriez_vous_que_votre_vie_quotidienne_est_aujourd_hui_touchee_par_le_changement_climatique__ =

														null

												;
											}
											jsonPath_tExtractJSONFields_1 = "Si_oui__de_quelle_maniere_votre_vie_quotidienne_est_elle_touchee_par_le_changement_climatique__";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
													if (root_tExtractJSONFields_1 == null) {
														root_tExtractJSONFields_1 = document_tExtractJSONFields_1
																.read(jsonPathCache_tExtractJSONFields_1
																		.getCompiledJsonPath("$"));
													}
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(root_tExtractJSONFields_1);
												} else {
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(row_tExtractJSONFields_1);
												}
												row2.Si_oui__de_quelle_maniere_votre_vie_quotidienne_est_elle_touchee_par_le_changement_climatique__ = value_tExtractJSONFields_1 == null
														?

														null

														: value_tExtractJSONFields_1.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row2.Si_oui__de_quelle_maniere_votre_vie_quotidienne_est_elle_touchee_par_le_changement_climatique__ =

														null

												;
											}
											jsonPath_tExtractJSONFields_1 = "A_titre_personnel__pensez_vous_pouvoir_contribuer_a_proteger_l_environnement__";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
													if (root_tExtractJSONFields_1 == null) {
														root_tExtractJSONFields_1 = document_tExtractJSONFields_1
																.read(jsonPathCache_tExtractJSONFields_1
																		.getCompiledJsonPath("$"));
													}
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(root_tExtractJSONFields_1);
												} else {
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(row_tExtractJSONFields_1);
												}
												row2.A_titre_personnel__pensez_vous_pouvoir_contribuer_a_proteger_l_environnement__ = value_tExtractJSONFields_1 == null
														?

														null

														: value_tExtractJSONFields_1.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row2.A_titre_personnel__pensez_vous_pouvoir_contribuer_a_proteger_l_environnement__ =

														null

												;
											}
											jsonPath_tExtractJSONFields_1 = "Si_oui__que_faites_vous_aujourd_hui_pour_proteger_l_environnement_et_ou_que_pourriez_vous_faire__";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
													if (root_tExtractJSONFields_1 == null) {
														root_tExtractJSONFields_1 = document_tExtractJSONFields_1
																.read(jsonPathCache_tExtractJSONFields_1
																		.getCompiledJsonPath("$"));
													}
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(root_tExtractJSONFields_1);
												} else {
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(row_tExtractJSONFields_1);
												}
												row2.Si_oui__que_faites_vous_aujourd_hui_pour_proteger_l_environnement_et_ou_que_pourriez_vous_faire__ = value_tExtractJSONFields_1 == null
														?

														null

														: value_tExtractJSONFields_1.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row2.Si_oui__que_faites_vous_aujourd_hui_pour_proteger_l_environnement_et_ou_que_pourriez_vous_faire__ =

														null

												;
											}
											jsonPath_tExtractJSONFields_1 = "Qu_est_ce_qui_pourrait_vous_inciter_a_changer_vos_comportements_comme_par_exemple_mieux_entretenir_et_regler_votre_chauffage__modifier_votre_maniere_de_conduire_ou_renoncer_a_prendre_votre_vehicule_pour_de_tres_petites_distances__";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
													if (root_tExtractJSONFields_1 == null) {
														root_tExtractJSONFields_1 = document_tExtractJSONFields_1
																.read(jsonPathCache_tExtractJSONFields_1
																		.getCompiledJsonPath("$"));
													}
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(root_tExtractJSONFields_1);
												} else {
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(row_tExtractJSONFields_1);
												}
												row2.Qu_est_ce_qui_pourrait_vous_inciter_a_changer_vos_comportements_comme_par_exemple_mieux_entretenir_et_regler_votre_chauffage__modifier_votre_maniere_de_conduire_ou_renoncer_a_prendre_votre_vehicule_pour_de_tres_petites_distances__ = value_tExtractJSONFields_1 == null
														?

														null

														: value_tExtractJSONFields_1.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row2.Qu_est_ce_qui_pourrait_vous_inciter_a_changer_vos_comportements_comme_par_exemple_mieux_entretenir_et_regler_votre_chauffage__modifier_votre_maniere_de_conduire_ou_renoncer_a_prendre_votre_vehicule_pour_de_tres_petites_distances__ =

														null

												;
											}
											jsonPath_tExtractJSONFields_1 = "Quelles_seraient_pour_vous_les_solutions_les_plus_simples_et_les_plus_supportables_sur_un_plan_financier_pour_vous_inciter_a_changer_vos_comportements__";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
													if (root_tExtractJSONFields_1 == null) {
														root_tExtractJSONFields_1 = document_tExtractJSONFields_1
																.read(jsonPathCache_tExtractJSONFields_1
																		.getCompiledJsonPath("$"));
													}
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(root_tExtractJSONFields_1);
												} else {
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(row_tExtractJSONFields_1);
												}
												row2.Quelles_seraient_pour_vous_les_solutions_les_plus_simples_et_les_plus_supportables_sur_un_plan_financier_pour_vous_inciter_a_changer_vos_comportements__ = value_tExtractJSONFields_1 == null
														?

														null

														: value_tExtractJSONFields_1.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row2.Quelles_seraient_pour_vous_les_solutions_les_plus_simples_et_les_plus_supportables_sur_un_plan_financier_pour_vous_inciter_a_changer_vos_comportements__ =

														null

												;
											}
											jsonPath_tExtractJSONFields_1 = "Par_rapport_a_votre_mode_de_chauffage_actuel__pensez_vous_qu_il_existe_des_solutions_alternatives_plus_ecologiques__";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
													if (root_tExtractJSONFields_1 == null) {
														root_tExtractJSONFields_1 = document_tExtractJSONFields_1
																.read(jsonPathCache_tExtractJSONFields_1
																		.getCompiledJsonPath("$"));
													}
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(root_tExtractJSONFields_1);
												} else {
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(row_tExtractJSONFields_1);
												}
												row2.Par_rapport_a_votre_mode_de_chauffage_actuel__pensez_vous_qu_il_existe_des_solutions_alternatives_plus_ecologiques__ = value_tExtractJSONFields_1 == null
														?

														null

														: value_tExtractJSONFields_1.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row2.Par_rapport_a_votre_mode_de_chauffage_actuel__pensez_vous_qu_il_existe_des_solutions_alternatives_plus_ecologiques__ =

														null

												;
											}
											jsonPath_tExtractJSONFields_1 = "Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_changer_de_mode_de_chauffage__";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
													if (root_tExtractJSONFields_1 == null) {
														root_tExtractJSONFields_1 = document_tExtractJSONFields_1
																.read(jsonPathCache_tExtractJSONFields_1
																		.getCompiledJsonPath("$"));
													}
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(root_tExtractJSONFields_1);
												} else {
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(row_tExtractJSONFields_1);
												}
												row2.Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_changer_de_mode_de_chauffage__ = value_tExtractJSONFields_1 == null
														?

														null

														: value_tExtractJSONFields_1.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row2.Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_changer_de_mode_de_chauffage__ =

														null

												;
											}
											jsonPath_tExtractJSONFields_1 = "Avez_vous_pour_vos_deplacements_quotidiens_la_possibilite_de_recourir_a_des_solutions_de_mobilite_alternatives_a_la_voiture_individuelle_comme_les_transports_en_commun__le_covoiturage__l_auto_partage__le_transport_a_la_demande__le_velo__etc___";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
													if (root_tExtractJSONFields_1 == null) {
														root_tExtractJSONFields_1 = document_tExtractJSONFields_1
																.read(jsonPathCache_tExtractJSONFields_1
																		.getCompiledJsonPath("$"));
													}
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(root_tExtractJSONFields_1);
												} else {
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(row_tExtractJSONFields_1);
												}
												row2.Avez_vous_pour_vos_deplacements_quotidiens_la_possibilite_de_recourir_a_des_solutions_de_mobilite_alternatives_a_la_voiture_individuelle_comme_les_transports_en_commun__le_covoiturage__l_auto_partage__le_transport_a_la_demande__le_velo__etc___ = value_tExtractJSONFields_1 == null
														?

														null

														: value_tExtractJSONFields_1.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row2.Avez_vous_pour_vos_deplacements_quotidiens_la_possibilite_de_recourir_a_des_solutions_de_mobilite_alternatives_a_la_voiture_individuelle_comme_les_transports_en_commun__le_covoiturage__l_auto_partage__le_transport_a_la_demande__le_velo__etc___ =

														null

												;
											}
											jsonPath_tExtractJSONFields_1 = "Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_utiliser_ces_solutions_alternatives__";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
													if (root_tExtractJSONFields_1 == null) {
														root_tExtractJSONFields_1 = document_tExtractJSONFields_1
																.read(jsonPathCache_tExtractJSONFields_1
																		.getCompiledJsonPath("$"));
													}
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(root_tExtractJSONFields_1);
												} else {
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(row_tExtractJSONFields_1);
												}
												row2.Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_utiliser_ces_solutions_alternatives__ = value_tExtractJSONFields_1 == null
														?

														null

														: value_tExtractJSONFields_1.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row2.Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_utiliser_ces_solutions_alternatives__ =

														null

												;
											}
											jsonPath_tExtractJSONFields_1 = "Si_non__quelles_sont_les_solutions_de_mobilite_alternatives_que_vous_souhaiteriez_pouvoir_utiliser__";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
													if (root_tExtractJSONFields_1 == null) {
														root_tExtractJSONFields_1 = document_tExtractJSONFields_1
																.read(jsonPathCache_tExtractJSONFields_1
																		.getCompiledJsonPath("$"));
													}
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(root_tExtractJSONFields_1);
												} else {
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(row_tExtractJSONFields_1);
												}
												row2.Si_non__quelles_sont_les_solutions_de_mobilite_alternatives_que_vous_souhaiteriez_pouvoir_utiliser__ = value_tExtractJSONFields_1 == null
														?

														null

														: value_tExtractJSONFields_1.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row2.Si_non__quelles_sont_les_solutions_de_mobilite_alternatives_que_vous_souhaiteriez_pouvoir_utiliser__ =

														null

												;
											}
											jsonPath_tExtractJSONFields_1 = "Et_qui_doit_selon_vous_se_charger_de_vous_proposer_ce_type_de_solutions_alternatives__";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
													if (root_tExtractJSONFields_1 == null) {
														root_tExtractJSONFields_1 = document_tExtractJSONFields_1
																.read(jsonPathCache_tExtractJSONFields_1
																		.getCompiledJsonPath("$"));
													}
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(root_tExtractJSONFields_1);
												} else {
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(row_tExtractJSONFields_1);
												}
												row2.Et_qui_doit_selon_vous_se_charger_de_vous_proposer_ce_type_de_solutions_alternatives__ = value_tExtractJSONFields_1 == null
														?

														null

														: value_tExtractJSONFields_1.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row2.Et_qui_doit_selon_vous_se_charger_de_vous_proposer_ce_type_de_solutions_alternatives__ =

														null

												;
											}
											jsonPath_tExtractJSONFields_1 = "Que_pourrait_faire_la_France_pour_faire_partager_ses_choix_en_matiere_d_environnement_au_niveau_europeen_et_international__";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
													if (root_tExtractJSONFields_1 == null) {
														root_tExtractJSONFields_1 = document_tExtractJSONFields_1
																.read(jsonPathCache_tExtractJSONFields_1
																		.getCompiledJsonPath("$"));
													}
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(root_tExtractJSONFields_1);
												} else {
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(row_tExtractJSONFields_1);
												}
												row2.Que_pourrait_faire_la_France_pour_faire_partager_ses_choix_en_matiere_d_environnement_au_niveau_europeen_et_international__ = value_tExtractJSONFields_1 == null
														?

														null

														: value_tExtractJSONFields_1.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row2.Que_pourrait_faire_la_France_pour_faire_partager_ses_choix_en_matiere_d_environnement_au_niveau_europeen_et_international__ =

														null

												;
											}
											jsonPath_tExtractJSONFields_1 = "Y_a_t_il_d_autres_points_sur_la_transition_ecologique_sur_lesquels_vous_souhaiteriez_vous_exprimer__";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
													if (root_tExtractJSONFields_1 == null) {
														root_tExtractJSONFields_1 = document_tExtractJSONFields_1
																.read(jsonPathCache_tExtractJSONFields_1
																		.getCompiledJsonPath("$"));
													}
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(root_tExtractJSONFields_1);
												} else {
													value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
															.read(row_tExtractJSONFields_1);
												}
												row2.Y_a_t_il_d_autres_points_sur_la_transition_ecologique_sur_lesquels_vous_souhaiteriez_vous_exprimer__ = value_tExtractJSONFields_1 == null
														?

														null

														: value_tExtractJSONFields_1.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row2.Y_a_t_il_d_autres_points_sur_la_transition_ecologique_sur_lesquels_vous_souhaiteriez_vous_exprimer__ =

														null

												;
											}
										} catch (java.lang.Exception ex_tExtractJSONFields_1) {
											System.err.println(ex_tExtractJSONFields_1.getMessage());
											row2 = null;
										}

									}

									isStructError_tExtractJSONFields_1 = false;

//}

									tos_count_tExtractJSONFields_1++;

									/**
									 * [tExtractJSONFields_1 main ] stop
									 */

									/**
									 * [tExtractJSONFields_1 process_data_begin ] start
									 */

									currentComponent = "tExtractJSONFields_1";

									/**
									 * [tExtractJSONFields_1 process_data_begin ] stop
									 */
// Start of branch "row2"
									if (row2 != null) {

										/**
										 * [tCassandraOutput_1 main ] start
										 */

										currentComponent = "tCassandraOutput_1";

										// row2
										// row2

										if (execStat) {
											runStat.updateStatOnConnection("row2" + iterateId, 1, 1);
										}

										boundStmt_tCassandraOutput_1 = new com.datastax.driver.core.BoundStatement(
												prepareStmt_tCassandraOutput_1);

										if (row2.theme == null) {
											boundStmt_tCassandraOutput_1.setToNull(0);
										} else {
											boundStmt_tCassandraOutput_1.setString(0, row2.theme);
										}
										if (row2.reference == null) {
											boundStmt_tCassandraOutput_1.setToNull(1);
										} else {
											boundStmt_tCassandraOutput_1.setString(1, row2.reference);
										}
										if (row2.id == null) {
											boundStmt_tCassandraOutput_1.setToNull(2);
										} else {
											boundStmt_tCassandraOutput_1.setString(2, row2.id);
										}
										if (row2.title == null) {
											boundStmt_tCassandraOutput_1.setToNull(3);
										} else {
											boundStmt_tCassandraOutput_1.setString(3, row2.title);
										}
										if (row2.createdAt == null) {
											boundStmt_tCassandraOutput_1.setToNull(4);
										} else {
											boundStmt_tCassandraOutput_1.setTimestamp(4, row2.createdAt);
										}
										if (row2.publishedAt == null) {
											boundStmt_tCassandraOutput_1.setToNull(5);
										} else {
											boundStmt_tCassandraOutput_1.setTimestamp(5, row2.publishedAt);
										}
										if (row2.updatedAt == null) {
											boundStmt_tCassandraOutput_1.setToNull(6);
										} else {
											boundStmt_tCassandraOutput_1.setTimestamp(6, row2.updatedAt);
										}
										if (row2.trashed == null) {
											boundStmt_tCassandraOutput_1.setToNull(7);
										} else {
											boundStmt_tCassandraOutput_1.setString(7, row2.trashed);
										}
										if (row2.trashedStatus == null) {
											boundStmt_tCassandraOutput_1.setToNull(8);
										} else {
											boundStmt_tCassandraOutput_1.setString(8, row2.trashedStatus);
										}
										if (row2.authorId == null) {
											boundStmt_tCassandraOutput_1.setToNull(9);
										} else {
											boundStmt_tCassandraOutput_1.setString(9, row2.authorId);
										}
										if (row2.authorType == null) {
											boundStmt_tCassandraOutput_1.setToNull(10);
										} else {
											boundStmt_tCassandraOutput_1.setString(10, row2.authorType);
										}
										if (row2.authorZipCode == null) {
											boundStmt_tCassandraOutput_1.setToNull(11);
										} else {
											boundStmt_tCassandraOutput_1.setString(11, row2.authorZipCode);
										}
										if (row2.Quel_est_aujourd_hui_pour_vous_le_probleme_concret_le_plus_important_dans_le_domaine_de_l_environnement__ == null) {
											boundStmt_tCassandraOutput_1.setToNull(12);
										} else {
											boundStmt_tCassandraOutput_1.setString(12,
													row2.Quel_est_aujourd_hui_pour_vous_le_probleme_concret_le_plus_important_dans_le_domaine_de_l_environnement__);
										}
										if (row2.Que_faudrait_il_faire_selon_vous_pour_apporter_des_reponses_a_ce_probleme__ == null) {
											boundStmt_tCassandraOutput_1.setToNull(13);
										} else {
											boundStmt_tCassandraOutput_1.setString(13,
													row2.Que_faudrait_il_faire_selon_vous_pour_apporter_des_reponses_a_ce_probleme__);
										}
										if (row2.Diriez_vous_que_votre_vie_quotidienne_est_aujourd_hui_touchee_par_le_changement_climatique__ == null) {
											boundStmt_tCassandraOutput_1.setToNull(14);
										} else {
											boundStmt_tCassandraOutput_1.setString(14,
													row2.Diriez_vous_que_votre_vie_quotidienne_est_aujourd_hui_touchee_par_le_changement_climatique__);
										}
										if (row2.Si_oui__de_quelle_maniere_votre_vie_quotidienne_est_elle_touchee_par_le_changement_climatique__ == null) {
											boundStmt_tCassandraOutput_1.setToNull(15);
										} else {
											boundStmt_tCassandraOutput_1.setString(15,
													row2.Si_oui__de_quelle_maniere_votre_vie_quotidienne_est_elle_touchee_par_le_changement_climatique__);
										}
										if (row2.A_titre_personnel__pensez_vous_pouvoir_contribuer_a_proteger_l_environnement__ == null) {
											boundStmt_tCassandraOutput_1.setToNull(16);
										} else {
											boundStmt_tCassandraOutput_1.setString(16,
													row2.A_titre_personnel__pensez_vous_pouvoir_contribuer_a_proteger_l_environnement__);
										}
										if (row2.Si_oui__que_faites_vous_aujourd_hui_pour_proteger_l_environnement_et_ou_que_pourriez_vous_faire__ == null) {
											boundStmt_tCassandraOutput_1.setToNull(17);
										} else {
											boundStmt_tCassandraOutput_1.setString(17,
													row2.Si_oui__que_faites_vous_aujourd_hui_pour_proteger_l_environnement_et_ou_que_pourriez_vous_faire__);
										}
										if (row2.Qu_est_ce_qui_pourrait_vous_inciter_a_changer_vos_comportements_comme_par_exemple_mieux_entretenir_et_regler_votre_chauffage__modifier_votre_maniere_de_conduire_ou_renoncer_a_prendre_votre_vehicule_pour_de_tres_petites_distances__ == null) {
											boundStmt_tCassandraOutput_1.setToNull(18);
										} else {
											boundStmt_tCassandraOutput_1.setString(18,
													row2.Qu_est_ce_qui_pourrait_vous_inciter_a_changer_vos_comportements_comme_par_exemple_mieux_entretenir_et_regler_votre_chauffage__modifier_votre_maniere_de_conduire_ou_renoncer_a_prendre_votre_vehicule_pour_de_tres_petites_distances__);
										}
										if (row2.Quelles_seraient_pour_vous_les_solutions_les_plus_simples_et_les_plus_supportables_sur_un_plan_financier_pour_vous_inciter_a_changer_vos_comportements__ == null) {
											boundStmt_tCassandraOutput_1.setToNull(19);
										} else {
											boundStmt_tCassandraOutput_1.setString(19,
													row2.Quelles_seraient_pour_vous_les_solutions_les_plus_simples_et_les_plus_supportables_sur_un_plan_financier_pour_vous_inciter_a_changer_vos_comportements__);
										}
										if (row2.Par_rapport_a_votre_mode_de_chauffage_actuel__pensez_vous_qu_il_existe_des_solutions_alternatives_plus_ecologiques__ == null) {
											boundStmt_tCassandraOutput_1.setToNull(20);
										} else {
											boundStmt_tCassandraOutput_1.setString(20,
													row2.Par_rapport_a_votre_mode_de_chauffage_actuel__pensez_vous_qu_il_existe_des_solutions_alternatives_plus_ecologiques__);
										}
										if (row2.Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_changer_de_mode_de_chauffage__ == null) {
											boundStmt_tCassandraOutput_1.setToNull(21);
										} else {
											boundStmt_tCassandraOutput_1.setString(21,
													row2.Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_changer_de_mode_de_chauffage__);
										}
										if (row2.Avez_vous_pour_vos_deplacements_quotidiens_la_possibilite_de_recourir_a_des_solutions_de_mobilite_alternatives_a_la_voiture_individuelle_comme_les_transports_en_commun__le_covoiturage__l_auto_partage__le_transport_a_la_demande__le_velo__etc___ == null) {
											boundStmt_tCassandraOutput_1.setToNull(22);
										} else {
											boundStmt_tCassandraOutput_1.setString(22,
													row2.Avez_vous_pour_vos_deplacements_quotidiens_la_possibilite_de_recourir_a_des_solutions_de_mobilite_alternatives_a_la_voiture_individuelle_comme_les_transports_en_commun__le_covoiturage__l_auto_partage__le_transport_a_la_demande__le_velo__etc___);
										}
										if (row2.Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_utiliser_ces_solutions_alternatives__ == null) {
											boundStmt_tCassandraOutput_1.setToNull(23);
										} else {
											boundStmt_tCassandraOutput_1.setString(23,
													row2.Si_oui__que_faudrait_il_faire_pour_vous_convaincre_ou_vous_aider_a_utiliser_ces_solutions_alternatives__);
										}
										if (row2.Si_non__quelles_sont_les_solutions_de_mobilite_alternatives_que_vous_souhaiteriez_pouvoir_utiliser__ == null) {
											boundStmt_tCassandraOutput_1.setToNull(24);
										} else {
											boundStmt_tCassandraOutput_1.setString(24,
													row2.Si_non__quelles_sont_les_solutions_de_mobilite_alternatives_que_vous_souhaiteriez_pouvoir_utiliser__);
										}
										if (row2.Et_qui_doit_selon_vous_se_charger_de_vous_proposer_ce_type_de_solutions_alternatives__ == null) {
											boundStmt_tCassandraOutput_1.setToNull(25);
										} else {
											boundStmt_tCassandraOutput_1.setString(25,
													row2.Et_qui_doit_selon_vous_se_charger_de_vous_proposer_ce_type_de_solutions_alternatives__);
										}
										if (row2.Que_pourrait_faire_la_France_pour_faire_partager_ses_choix_en_matiere_d_environnement_au_niveau_europeen_et_international__ == null) {
											boundStmt_tCassandraOutput_1.setToNull(26);
										} else {
											boundStmt_tCassandraOutput_1.setString(26,
													row2.Que_pourrait_faire_la_France_pour_faire_partager_ses_choix_en_matiere_d_environnement_au_niveau_europeen_et_international__);
										}
										if (row2.Y_a_t_il_d_autres_points_sur_la_transition_ecologique_sur_lesquels_vous_souhaiteriez_vous_exprimer__ == null) {
											boundStmt_tCassandraOutput_1.setToNull(27);
										} else {
											boundStmt_tCassandraOutput_1.setString(27,
													row2.Y_a_t_il_d_autres_points_sur_la_transition_ecologique_sur_lesquels_vous_souhaiteriez_vous_exprimer__);
										}

										cassandraBatchExec_tCassandraOutput_1
												.addOrExecBatch(boundStmt_tCassandraOutput_1);

										nb_line_tCassandraOutput_1++;

										tos_count_tCassandraOutput_1++;

										/**
										 * [tCassandraOutput_1 main ] stop
										 */

										/**
										 * [tCassandraOutput_1 process_data_begin ] start
										 */

										currentComponent = "tCassandraOutput_1";

										/**
										 * [tCassandraOutput_1 process_data_begin ] stop
										 */

										/**
										 * [tCassandraOutput_1 process_data_end ] start
										 */

										currentComponent = "tCassandraOutput_1";

										/**
										 * [tCassandraOutput_1 process_data_end ] stop
										 */

									} // End of branch "row2"

									// end for
								}

							} // C_01

							/**
							 * [tExtractJSONFields_1 process_data_end ] start
							 */

							currentComponent = "tExtractJSONFields_1";

							/**
							 * [tExtractJSONFields_1 process_data_end ] stop
							 */

							/**
							 * [tKafkaInput_1 process_data_end ] start
							 */

							currentComponent = "tKafkaInput_1";

							/**
							 * [tKafkaInput_1 process_data_end ] stop
							 */

							/**
							 * [tKafkaInput_1 end ] start
							 */

							currentComponent = "tKafkaInput_1";

						} // end for ConsumerRecord
					} catch (org.apache.kafka.common.errors.AuthenticationException
							| org.apache.kafka.common.errors.AuthorizationException
							| org.apache.kafka.common.errors.UnknownServerException
							| org.apache.kafka.common.errors.UnsupportedVersionException e) {
						// the process stops when there is AuthenticationException,
						// AuthorizationException, UnknownServerException or UnsupportedVersionException
						throw e;
					} catch (org.apache.kafka.common.KafkaException e) {

						break;
					}
				} // end while(true)

				ok_Hash.put("tKafkaInput_1", true);
				end_Hash.put("tKafkaInput_1", System.currentTimeMillis());

				/**
				 * [tKafkaInput_1 end ] stop
				 */

				/**
				 * [tExtractJSONFields_1 end ] start
				 */

				currentComponent = "tExtractJSONFields_1";

				globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tExtractJSONFields_1", true);
				end_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());

				/**
				 * [tExtractJSONFields_1 end ] stop
				 */

				/**
				 * [tCassandraOutput_1 end ] start
				 */

				currentComponent = "tCassandraOutput_1";

				cassandraBatchExec_tCassandraOutput_1.endBatch();
				globalMap.put("tCassandraOutput_1_NB_LINE", nb_line_tCassandraOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tCassandraOutput_1", true);
				end_Hash.put("tCassandraOutput_1", System.currentTimeMillis());

				/**
				 * [tCassandraOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tKafkaInput_1 finally ] start
				 */

				currentComponent = "tKafkaInput_1";

				/**
				 * [tKafkaInput_1 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_1 finally ] start
				 */

				currentComponent = "tExtractJSONFields_1";

				/**
				 * [tExtractJSONFields_1 finally ] stop
				 */

				/**
				 * [tCassandraOutput_1 finally ] start
				 */

				currentComponent = "tCassandraOutput_1";

				/**
				 * [tCassandraOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tKafkaInput_1_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tCassandraClose_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tCassandraClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tCassandraClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tCassandraClose_1 begin ] start
				 */

				ok_Hash.put("tCassandraClose_1", false);
				start_Hash.put("tCassandraClose_1", System.currentTimeMillis());

				currentComponent = "tCassandraClose_1";

				int tos_count_tCassandraClose_1 = 0;

				/**
				 * [tCassandraClose_1 begin ] stop
				 */

				/**
				 * [tCassandraClose_1 main ] start
				 */

				currentComponent = "tCassandraClose_1";

				com.datastax.driver.core.Cluster cluster_tCassandraClose_1 = (com.datastax.driver.core.Cluster) globalMap
						.get("cluster_tCassandraConnection_1");
				com.datastax.driver.core.Session connection_tCassandraClose_1 = (com.datastax.driver.core.Session) globalMap
						.get("connection_tCassandraConnection_1");
				if (connection_tCassandraClose_1 != null) {
					connection_tCassandraClose_1.close();
				}
				if (cluster_tCassandraClose_1 != null) {
					cluster_tCassandraClose_1.close();
				}

				tos_count_tCassandraClose_1++;

				/**
				 * [tCassandraClose_1 main ] stop
				 */

				/**
				 * [tCassandraClose_1 process_data_begin ] start
				 */

				currentComponent = "tCassandraClose_1";

				/**
				 * [tCassandraClose_1 process_data_begin ] stop
				 */

				/**
				 * [tCassandraClose_1 process_data_end ] start
				 */

				currentComponent = "tCassandraClose_1";

				/**
				 * [tCassandraClose_1 process_data_end ] stop
				 */

				/**
				 * [tCassandraClose_1 end ] start
				 */

				currentComponent = "tCassandraClose_1";

				ok_Hash.put("tCassandraClose_1", true);
				end_Hash.put("tCassandraClose_1", System.currentTimeMillis());

				/**
				 * [tCassandraClose_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tCassandraClose_1 finally ] start
				 */

				currentComponent = "tCassandraClose_1";

				/**
				 * [tCassandraClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tCassandraClose_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tKafkaConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tKafkaConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tKafkaConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tKafkaConnection_1 begin ] start
				 */

				ok_Hash.put("tKafkaConnection_1", false);
				start_Hash.put("tKafkaConnection_1", System.currentTimeMillis());

				currentComponent = "tKafkaConnection_1";

				int tos_count_tKafkaConnection_1 = 0;

				/**
				 * [tKafkaConnection_1 begin ] stop
				 */

				/**
				 * [tKafkaConnection_1 main ] start
				 */

				currentComponent = "tKafkaConnection_1";

				tos_count_tKafkaConnection_1++;

				/**
				 * [tKafkaConnection_1 main ] stop
				 */

				/**
				 * [tKafkaConnection_1 process_data_begin ] start
				 */

				currentComponent = "tKafkaConnection_1";

				/**
				 * [tKafkaConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tKafkaConnection_1 process_data_end ] start
				 */

				currentComponent = "tKafkaConnection_1";

				/**
				 * [tKafkaConnection_1 process_data_end ] stop
				 */

				/**
				 * [tKafkaConnection_1 end ] start
				 */

				currentComponent = "tKafkaConnection_1";

				ok_Hash.put("tKafkaConnection_1", true);
				end_Hash.put("tKafkaConnection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tCassandraConnection_1Process(globalMap);

				/**
				 * [tKafkaConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tKafkaConnection_1 finally ] start
				 */

				currentComponent = "tKafkaConnection_1";

				/**
				 * [tKafkaConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tKafkaConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tCassandraConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tCassandraConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tCassandraConnection_1 begin ] start
				 */

				ok_Hash.put("tCassandraConnection_1", false);
				start_Hash.put("tCassandraConnection_1", System.currentTimeMillis());

				currentComponent = "tCassandraConnection_1";

				int tos_count_tCassandraConnection_1 = 0;

				/**
				 * [tCassandraConnection_1 begin ] stop
				 */

				/**
				 * [tCassandraConnection_1 main ] start
				 */

				currentComponent = "tCassandraConnection_1";

				com.datastax.driver.core.Cluster cluster_tCassandraConnection_1 = com.datastax.driver.core.Cluster
						.builder().addContactPoints(context.cassandra_host.split(","))
						.withPort(Integer.valueOf(context.cassandra_port))

						.build();

				com.datastax.driver.core.Session connection_tCassandraConnection_1 = null;
				connection_tCassandraConnection_1 = cluster_tCassandraConnection_1.connect();
				globalMap.put("cluster_tCassandraConnection_1", cluster_tCassandraConnection_1);
				globalMap.put("connection_tCassandraConnection_1", connection_tCassandraConnection_1);

				tos_count_tCassandraConnection_1++;

				/**
				 * [tCassandraConnection_1 main ] stop
				 */

				/**
				 * [tCassandraConnection_1 process_data_begin ] start
				 */

				currentComponent = "tCassandraConnection_1";

				/**
				 * [tCassandraConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tCassandraConnection_1 process_data_end ] start
				 */

				currentComponent = "tCassandraConnection_1";

				/**
				 * [tCassandraConnection_1 process_data_end ] stop
				 */

				/**
				 * [tCassandraConnection_1 end ] start
				 */

				currentComponent = "tCassandraConnection_1";

				ok_Hash.put("tCassandraConnection_1", true);
				end_Hash.put("tCassandraConnection_1", System.currentTimeMillis());

				/**
				 * [tCassandraConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tCassandraConnection_1 finally ] start
				 */

				currentComponent = "tCassandraConnection_1";

				/**
				 * [tCassandraConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tCassandraConnection_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final kafka2cassandra kafka2cassandraClass = new kafka2cassandra();

		int exitCode = kafka2cassandraClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = kafka2cassandra.class.getClassLoader()
					.getResourceAsStream("debat_national/kafka2cassandra_1_0/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = kafka2cassandra.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("group_cassandra", "id_String");
					context.group_cassandra = (String) context.getProperty("group_cassandra");
					context.setContextType("cassandra_host", "id_String");
					context.cassandra_host = (String) context.getProperty("cassandra_host");
					context.setContextType("cassandra_port", "id_String");
					context.cassandra_port = (String) context.getProperty("cassandra_port");
					context.setContextType("column_family", "id_String");
					context.column_family = (String) context.getProperty("column_family");
					context.setContextType("data", "id_String");
					context.data = (String) context.getProperty("data");
					context.setContextType("kafka_host", "id_String");
					context.kafka_host = (String) context.getProperty("kafka_host");
					context.setContextType("keyspace", "id_String");
					context.keyspace = (String) context.getProperty("keyspace");
					context.setContextType("local", "id_String");
					context.local = (String) context.getProperty("local");
					context.setContextType("topic_cassandra", "id_String");
					context.topic_cassandra = (String) context.getProperty("topic_cassandra");
					context.setContextType("url", "id_String");
					context.url = (String) context.getProperty("url");
					context.setContextType("zookeeper_host", "id_String");
					context.zookeeper_host = (String) context.getProperty("zookeeper_host");
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("group_cassandra")) {
				context.group_cassandra = (String) parentContextMap.get("group_cassandra");
			}
			if (parentContextMap.containsKey("cassandra_host")) {
				context.cassandra_host = (String) parentContextMap.get("cassandra_host");
			}
			if (parentContextMap.containsKey("cassandra_port")) {
				context.cassandra_port = (String) parentContextMap.get("cassandra_port");
			}
			if (parentContextMap.containsKey("column_family")) {
				context.column_family = (String) parentContextMap.get("column_family");
			}
			if (parentContextMap.containsKey("data")) {
				context.data = (String) parentContextMap.get("data");
			}
			if (parentContextMap.containsKey("kafka_host")) {
				context.kafka_host = (String) parentContextMap.get("kafka_host");
			}
			if (parentContextMap.containsKey("keyspace")) {
				context.keyspace = (String) parentContextMap.get("keyspace");
			}
			if (parentContextMap.containsKey("local")) {
				context.local = (String) parentContextMap.get("local");
			}
			if (parentContextMap.containsKey("topic_cassandra")) {
				context.topic_cassandra = (String) parentContextMap.get("topic_cassandra");
			}
			if (parentContextMap.containsKey("url")) {
				context.url = (String) parentContextMap.get("url");
			}
			if (parentContextMap.containsKey("zookeeper_host")) {
				context.zookeeper_host = (String) parentContextMap.get("zookeeper_host");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tKafkaInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tKafkaInput_1) {
			globalMap.put("tKafkaInput_1_SUBPROCESS_STATE", -1);

			e_tKafkaInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : kafka2cassandra");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeCassandraConnections();

	}

	private void closeCassandraConnections() {
		try {
			Object obj_cluster;
			Object obj_conn;
			obj_cluster = globalMap.remove("cluster_tCassandraConnection_1");
			obj_conn = globalMap.remove("connection_tCassandraConnection_1");
			if (obj_conn != null) {
				((com.datastax.driver.core.Session) obj_conn).close();
			}
			if (obj_cluster != null) {
				((com.datastax.driver.core.Cluster) obj_cluster).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("connection_tCassandraConnection_1", globalMap.get("connection_tCassandraConnection_1"));
		connections.put("cluster_tCassandraConnection_1", globalMap.get("cluster_tCassandraConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring=")) {// for trunjob call
			enableLogStash = "true".equalsIgnoreCase(arg.substring(13));
		}

		if (!enableLogStash) {
			enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 141904 characters generated by Talend Open Studio for Big Data on the
 * September 10, 2019 at 11:24:26 AM UTC
 ************************************************************************************************/