// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package debat_national.opendata2kafkaiteration_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: opendata2kafkaIteration Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.2.1.20190620_1446
 * @status
 */
public class opendata2kafkaIteration implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (group_cassandra != null) {

				this.setProperty("group_cassandra", group_cassandra.toString());

			}

			if (cassandra_host != null) {

				this.setProperty("cassandra_host", cassandra_host.toString());

			}

			if (cassandra_port != null) {

				this.setProperty("cassandra_port", cassandra_port.toString());

			}

			if (column_family != null) {

				this.setProperty("column_family", column_family.toString());

			}

			if (data != null) {

				this.setProperty("data", data.toString());

			}

			if (kafka_host != null) {

				this.setProperty("kafka_host", kafka_host.toString());

			}

			if (keyspace != null) {

				this.setProperty("keyspace", keyspace.toString());

			}

			if (local != null) {

				this.setProperty("local", local.toString());

			}

			if (topic_cassandra != null) {

				this.setProperty("topic_cassandra", topic_cassandra.toString());

			}

			if (url != null) {

				this.setProperty("url", url.toString());

			}

			if (zookeeper_host != null) {

				this.setProperty("zookeeper_host", zookeeper_host.toString());

			}

		}

		public String group_cassandra;

		public String getGroup_cassandra() {
			return this.group_cassandra;
		}

		public String cassandra_host;

		public String getCassandra_host() {
			return this.cassandra_host;
		}

		public String cassandra_port;

		public String getCassandra_port() {
			return this.cassandra_port;
		}

		public String column_family;

		public String getColumn_family() {
			return this.column_family;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		public String kafka_host;

		public String getKafka_host() {
			return this.kafka_host;
		}

		public String keyspace;

		public String getKeyspace() {
			return this.keyspace;
		}

		public String local;

		public String getLocal() {
			return this.local;
		}

		public String topic_cassandra;

		public String getTopic_cassandra() {
			return this.topic_cassandra;
		}

		public String url;

		public String getUrl() {
			return this.url;
		}

		public String zookeeper_host;

		public String getZookeeper_host() {
			return this.zookeeper_host;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "opendata2kafkaIteration";
	private final String projectName = "DEBAT_NATIONAL";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					opendata2kafkaIteration.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(opendata2kafkaIteration.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception", currentComponent, 6,
								e.getClass().getName() + ":" + e.getMessage(), 1);
						tLogCatcher_1Process(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tForeach_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tForeach_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tForeach_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tForeach_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tForeach_1 begin ] start
				 */

				int NB_ITERATE_tWarn_1 = 0; // for statistics

				int NB_ITERATE_tRunJob_1 = 0; // for statistics

				ok_Hash.put("tForeach_1", false);
				start_Hash.put("tForeach_1", System.currentTimeMillis());

				currentComponent = "tForeach_1";

				int tos_count_tForeach_1 = 0;

				Object[] values_tForeach_1 = new Object[] {
						"http://opendata.auth-6f31f706db6f4a24b55f42a6a79c5086.storage.sbg5.cloud.ovh.net/2019-01-31/LA_TRANSITION_ECOLOGIQUE.csv",
						"http://opendata.auth-6f31f706db6f4a24b55f42a6a79c5086.storage.sbg5.cloud.ovh.net/2019-02-06/LA_TRANSITION_ECOLOGIQUE.csv",
						"http://opendata.auth-6f31f706db6f4a24b55f42a6a79c5086.storage.sbg5.cloud.ovh.net/2019-02-17/LA_TRANSITION_ECOLOGIQUE.csv",
						"http://opendata.auth-6f31f706db6f4a24b55f42a6a79c5086.storage.sbg5.cloud.ovh.net/2019-03-02/LA_TRANSITION_ECOLOGIQUE.csv",
						"http://opendata.auth-6f31f706db6f4a24b55f42a6a79c5086.storage.sbg5.cloud.ovh.net/2019-03-08/LA_TRANSITION_ECOLOGIQUE.csv",
						"http://opendata.auth-6f31f706db6f4a24b55f42a6a79c5086.storage.sbg5.cloud.ovh.net/2019-03-21/LA_TRANSITION_ECOLOGIQUE.csv",
						"http://opendata.auth-6f31f706db6f4a24b55f42a6a79c5086.storage.sbg5.cloud.ovh.net/2019-01-31/DEMOCRATIE_ET_CITOYENNETE.csv", };

				for (Object tmp_tForeach_1 : values_tForeach_1) {

					globalMap.put("tForeach_1_CURRENT_VALUE", tmp_tForeach_1);

					/**
					 * [tForeach_1 begin ] stop
					 */

					/**
					 * [tForeach_1 main ] start
					 */

					currentComponent = "tForeach_1";

					tos_count_tForeach_1++;

					/**
					 * [tForeach_1 main ] stop
					 */

					/**
					 * [tForeach_1 process_data_begin ] start
					 */

					currentComponent = "tForeach_1";

					/**
					 * [tForeach_1 process_data_begin ] stop
					 */
					NB_ITERATE_tWarn_1++;

					if (execStat) {
						runStat.updateStatOnConnection("iterate2", 1, "exec" + NB_ITERATE_tWarn_1);
						// Thread.sleep(1000);
					}

					/**
					 * [tWarn_1 begin ] start
					 */

					ok_Hash.put("tWarn_1", false);
					start_Hash.put("tWarn_1", System.currentTimeMillis());

					currentComponent = "tWarn_1";

					int tos_count_tWarn_1 = 0;

					/**
					 * [tWarn_1 begin ] stop
					 */

					/**
					 * [tWarn_1 main ] start
					 */

					currentComponent = "tWarn_1";

					try {

						resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread.currentThread().getId() + "",
								"INFO", "", ((String) globalMap.get("tForeach_1_CURRENT_VALUE")) + " in progress", "",
								"");
						tLogCatcher_1.addMessage("tWarn", "tWarn_1", 3,
								((String) globalMap.get("tForeach_1_CURRENT_VALUE")) + " in progress", 0);
						tLogCatcher_1Process(globalMap);
						globalMap.put("tWarn_1_WARN_MESSAGES",
								((String) globalMap.get("tForeach_1_CURRENT_VALUE")) + " in progress");
						globalMap.put("tWarn_1_WARN_PRIORITY", 3);
						globalMap.put("tWarn_1_WARN_CODE", 0);

					} catch (Exception e_tWarn_1) {
						logIgnoredError(String.format("tWarn_1 - tWarn failed to log message due to internal error: %s",
								e_tWarn_1), e_tWarn_1);
					}

					tos_count_tWarn_1++;

					/**
					 * [tWarn_1 main ] stop
					 */

					/**
					 * [tWarn_1 process_data_begin ] start
					 */

					currentComponent = "tWarn_1";

					/**
					 * [tWarn_1 process_data_begin ] stop
					 */

					/**
					 * [tWarn_1 process_data_end ] start
					 */

					currentComponent = "tWarn_1";

					/**
					 * [tWarn_1 process_data_end ] stop
					 */

					/**
					 * [tWarn_1 end ] start
					 */

					currentComponent = "tWarn_1";

					ok_Hash.put("tWarn_1", true);
					end_Hash.put("tWarn_1", System.currentTimeMillis());

					/**
					 * [tWarn_1 end ] stop
					 */
					if (execStat) {
						runStat.updateStatOnConnection("iterate2", 2, "exec" + NB_ITERATE_tWarn_1);
					}

					NB_ITERATE_tRunJob_1++;

					if (execStat) {
						runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tRunJob_1);
						// Thread.sleep(1000);
					}

					/**
					 * [tRunJob_1 begin ] start
					 */

					ok_Hash.put("tRunJob_1", false);
					start_Hash.put("tRunJob_1", System.currentTimeMillis());

					currentComponent = "tRunJob_1";

					int tos_count_tRunJob_1 = 0;

					/**
					 * [tRunJob_1 begin ] stop
					 */

					/**
					 * [tRunJob_1 main ] start
					 */

					currentComponent = "tRunJob_1";

					java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

					paraList_tRunJob_1.add("--father_pid=" + pid);

					paraList_tRunJob_1.add("--root_pid=" + rootPid);

					paraList_tRunJob_1.add("--father_node=tRunJob_1");

					if (enableLogStash) {
						paraList_tRunJob_1.add("--monitoring=" + enableLogStash);
					}

					// for feature:10589

					paraList_tRunJob_1.add("--stat_port=" + portStats);

					if (resuming_logs_dir_path != null) {
						paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
					}
					String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
					String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
					if ("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null) {
						paraList_tRunJob_1.add("--resuming_checkpoint_path="
								+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
					}
					paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");

					java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

					context.synchronizeContext();
					class ContextProcessor_tRunJob_1 {
						private void transmitContext_0() {
							parentContextMap_tRunJob_1.put("group_cassandra", context.group_cassandra);
							paraList_tRunJob_1.add("--context_type " + "group_cassandra" + "=" + "id_String");
							parentContextMap_tRunJob_1.put("cassandra_host", context.cassandra_host);
							paraList_tRunJob_1.add("--context_type " + "cassandra_host" + "=" + "id_String");
							parentContextMap_tRunJob_1.put("cassandra_port", context.cassandra_port);
							paraList_tRunJob_1.add("--context_type " + "cassandra_port" + "=" + "id_String");
							parentContextMap_tRunJob_1.put("column_family", context.column_family);
							paraList_tRunJob_1.add("--context_type " + "column_family" + "=" + "id_String");
							parentContextMap_tRunJob_1.put("data", context.data);
							paraList_tRunJob_1.add("--context_type " + "data" + "=" + "id_String");
							parentContextMap_tRunJob_1.put("kafka_host", context.kafka_host);
							paraList_tRunJob_1.add("--context_type " + "kafka_host" + "=" + "id_String");
							parentContextMap_tRunJob_1.put("keyspace", context.keyspace);
							paraList_tRunJob_1.add("--context_type " + "keyspace" + "=" + "id_String");
							parentContextMap_tRunJob_1.put("local", context.local);
							paraList_tRunJob_1.add("--context_type " + "local" + "=" + "id_String");
							parentContextMap_tRunJob_1.put("topic_cassandra", context.topic_cassandra);
							paraList_tRunJob_1.add("--context_type " + "topic_cassandra" + "=" + "id_String");
							parentContextMap_tRunJob_1.put("url", context.url);
							paraList_tRunJob_1.add("--context_type " + "url" + "=" + "id_String");
							parentContextMap_tRunJob_1.put("zookeeper_host", context.zookeeper_host);
							paraList_tRunJob_1.add("--context_type " + "zookeeper_host" + "=" + "id_String");
						}

						public void transmitAllContext() {
							transmitContext_0();
						}
					}
					new ContextProcessor_tRunJob_1().transmitAllContext();
					java.util.Enumeration<?> propertyNames_tRunJob_1 = context.propertyNames();
					while (propertyNames_tRunJob_1.hasMoreElements()) {
						String key_tRunJob_1 = (String) propertyNames_tRunJob_1.nextElement();
						Object value_tRunJob_1 = (Object) context.get(key_tRunJob_1);
						if (value_tRunJob_1 != null) {
							paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
						} else {
							paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "="
									+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
						}

					}

					Object obj_tRunJob_1 = null;

					obj_tRunJob_1 = context.data + ((String) globalMap.get("tForeach_1_CURRENT_VALUE")).split("/")[3]
							+ "-" + ((String) globalMap.get("tForeach_1_CURRENT_VALUE")).split("/")[4];
					if (obj_tRunJob_1 != null) {
						paraList_tRunJob_1
								.add("--context_param local=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					} else {
						paraList_tRunJob_1.add(
								"--context_param local=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
					}

					parentContextMap_tRunJob_1.put("local", obj_tRunJob_1);

					obj_tRunJob_1 = ((String) globalMap.get("tForeach_1_CURRENT_VALUE"));
					if (obj_tRunJob_1 != null) {
						paraList_tRunJob_1
								.add("--context_param url=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					} else {
						paraList_tRunJob_1.add(
								"--context_param url=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
					}

					parentContextMap_tRunJob_1.put("url", obj_tRunJob_1);

					debat_national.opendata2kafka_0_1.opendata2kafka childJob_tRunJob_1 = new debat_national.opendata2kafka_0_1.opendata2kafka();
					// pass DataSources
					java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					if (null != talendDataSources_tRunJob_1) {
						java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
						for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
								.entrySet()) {
							dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
									talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
						}
						childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
					}

					childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;

					String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
							.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

					errorCode = childJob_tRunJob_1.getErrorCode();

					if (childJob_tRunJob_1.getErrorCode() == null) {
						globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null
								&& ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
					} else {
						globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
					}
					if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
						globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
								childJob_tRunJob_1.getExceptionStackTrace());
					}

					if (childJob_tRunJob_1.getErrorCode() != null
							|| ("failure").equals(childJob_tRunJob_1.getStatus())) {
						java.lang.Exception ce_tRunJob_1 = childJob_tRunJob_1.getException();
						throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_1 != null)
								? (ce_tRunJob_1.getClass().getName() + ": " + ce_tRunJob_1.getMessage())
								: ""));
					}

					tos_count_tRunJob_1++;

					/**
					 * [tRunJob_1 main ] stop
					 */

					/**
					 * [tRunJob_1 process_data_begin ] start
					 */

					currentComponent = "tRunJob_1";

					/**
					 * [tRunJob_1 process_data_begin ] stop
					 */

					/**
					 * [tRunJob_1 process_data_end ] start
					 */

					currentComponent = "tRunJob_1";

					/**
					 * [tRunJob_1 process_data_end ] stop
					 */

					/**
					 * [tRunJob_1 end ] start
					 */

					currentComponent = "tRunJob_1";

					ok_Hash.put("tRunJob_1", true);
					end_Hash.put("tRunJob_1", System.currentTimeMillis());

					/**
					 * [tRunJob_1 end ] stop
					 */
					if (execStat) {
						runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tRunJob_1);
					}

					/**
					 * [tForeach_1 process_data_end ] start
					 */

					currentComponent = "tForeach_1";

					/**
					 * [tForeach_1 process_data_end ] stop
					 */

					/**
					 * [tForeach_1 end ] start
					 */

					currentComponent = "tForeach_1";

				}

				ok_Hash.put("tForeach_1", true);
				end_Hash.put("tForeach_1", System.currentTimeMillis());

				/**
				 * [tForeach_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tForeach_1 finally ] start
				 */

				currentComponent = "tForeach_1";

				/**
				 * [tForeach_1 finally ] stop
				 */

				/**
				 * [tWarn_1 finally ] start
				 */

				currentComponent = "tWarn_1";

				/**
				 * [tWarn_1 finally ] stop
				 */

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tForeach_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tLogCatcher_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DEBAT_NATIONAL_opendata2kafkaIteration = new byte[0];
		static byte[] commonByteArray_DEBAT_NATIONAL_opendata2kafkaIteration = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEBAT_NATIONAL_opendata2kafkaIteration.length) {
					if (length < 1024 && commonByteArray_DEBAT_NATIONAL_opendata2kafkaIteration.length == 0) {
						commonByteArray_DEBAT_NATIONAL_opendata2kafkaIteration = new byte[1024];
					} else {
						commonByteArray_DEBAT_NATIONAL_opendata2kafkaIteration = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEBAT_NATIONAL_opendata2kafkaIteration, 0, length);
				strReturn = new String(commonByteArray_DEBAT_NATIONAL_opendata2kafkaIteration, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEBAT_NATIONAL_opendata2kafkaIteration) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "\t";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				try {
					for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
						row1.type = lcm.getType();
						row1.origin = (lcm.getOrigin() == null || lcm.getOrigin().length() < 1 ? null
								: lcm.getOrigin());
						row1.priority = lcm.getPriority();
						row1.message = lcm.getMessage();
						row1.code = lcm.getCode();

						row1.moment = java.util.Calendar.getInstance().getTime();

						row1.pid = pid;
						row1.root_pid = rootPid;
						row1.father_pid = fatherPid;

						row1.project = projectName;
						row1.job = jobName;
						row1.context = contextStr;

						/**
						 * [tLogCatcher_1 begin ] stop
						 */

						/**
						 * [tLogCatcher_1 main ] start
						 */

						currentComponent = "tLogCatcher_1";

						tos_count_tLogCatcher_1++;

						/**
						 * [tLogCatcher_1 main ] stop
						 */

						/**
						 * [tLogCatcher_1 process_data_begin ] start
						 */

						currentComponent = "tLogCatcher_1";

						/**
						 * [tLogCatcher_1 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_1 main ] start
						 */

						currentComponent = "tLogRow_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId, 1, 1);
						}

///////////////////////		

						strBuffer_tLogRow_1 = new StringBuilder();

						if (row1.moment != null) { //

							strBuffer_tLogRow_1.append(FormatterUtils.format_Date(row1.moment, "yyyy-MM-dd HH:mm:ss"));

						} //

						strBuffer_tLogRow_1.append("\t");

						if (row1.pid != null) { //

							strBuffer_tLogRow_1.append(String.valueOf(row1.pid));

						} //

						strBuffer_tLogRow_1.append("\t");

						if (row1.root_pid != null) { //

							strBuffer_tLogRow_1.append(String.valueOf(row1.root_pid));

						} //

						strBuffer_tLogRow_1.append("\t");

						if (row1.father_pid != null) { //

							strBuffer_tLogRow_1.append(String.valueOf(row1.father_pid));

						} //

						strBuffer_tLogRow_1.append("\t");

						if (row1.project != null) { //

							strBuffer_tLogRow_1.append(String.valueOf(row1.project));

						} //

						strBuffer_tLogRow_1.append("\t");

						if (row1.job != null) { //

							strBuffer_tLogRow_1.append(String.valueOf(row1.job));

						} //

						strBuffer_tLogRow_1.append("\t");

						if (row1.context != null) { //

							strBuffer_tLogRow_1.append(String.valueOf(row1.context));

						} //

						strBuffer_tLogRow_1.append("\t");

						if (row1.priority != null) { //

							strBuffer_tLogRow_1.append(String.valueOf(row1.priority));

						} //

						strBuffer_tLogRow_1.append("\t");

						if (row1.type != null) { //

							strBuffer_tLogRow_1.append(String.valueOf(row1.type));

						} //

						strBuffer_tLogRow_1.append("\t");

						if (row1.origin != null) { //

							strBuffer_tLogRow_1.append(String.valueOf(row1.origin));

						} //

						strBuffer_tLogRow_1.append("\t");

						if (row1.message != null) { //

							strBuffer_tLogRow_1.append(String.valueOf(row1.message));

						} //

						strBuffer_tLogRow_1.append("\t");

						if (row1.code != null) { //

							strBuffer_tLogRow_1.append(String.valueOf(row1.code));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_1 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
						}
						consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
						consoleOut_tLogRow_1.flush();
						nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

						tos_count_tLogRow_1++;

						/**
						 * [tLogRow_1 main ] stop
						 */

						/**
						 * [tLogRow_1 process_data_begin ] start
						 */

						currentComponent = "tLogRow_1";

						/**
						 * [tLogRow_1 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_1 process_data_end ] start
						 */

						currentComponent = "tLogRow_1";

						/**
						 * [tLogRow_1 process_data_end ] stop
						 */

						/**
						 * [tLogCatcher_1 process_data_end ] start
						 */

						currentComponent = "tLogCatcher_1";

						/**
						 * [tLogCatcher_1 process_data_end ] stop
						 */

						/**
						 * [tLogCatcher_1 end ] start
						 */

						currentComponent = "tLogCatcher_1";

					}
				} catch (Exception e_tLogCatcher_1) {
					logIgnoredError(String.format(
							"tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s",
							e_tLogCatcher_1), e_tLogCatcher_1);
				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final opendata2kafkaIteration opendata2kafkaIterationClass = new opendata2kafkaIteration();

		int exitCode = opendata2kafkaIterationClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = opendata2kafkaIteration.class.getClassLoader().getResourceAsStream(
					"debat_national/opendata2kafkaiteration_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = opendata2kafkaIteration.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("group_cassandra", "id_String");
					context.group_cassandra = (String) context.getProperty("group_cassandra");
					context.setContextType("cassandra_host", "id_String");
					context.cassandra_host = (String) context.getProperty("cassandra_host");
					context.setContextType("cassandra_port", "id_String");
					context.cassandra_port = (String) context.getProperty("cassandra_port");
					context.setContextType("column_family", "id_String");
					context.column_family = (String) context.getProperty("column_family");
					context.setContextType("data", "id_String");
					context.data = (String) context.getProperty("data");
					context.setContextType("kafka_host", "id_String");
					context.kafka_host = (String) context.getProperty("kafka_host");
					context.setContextType("keyspace", "id_String");
					context.keyspace = (String) context.getProperty("keyspace");
					context.setContextType("local", "id_String");
					context.local = (String) context.getProperty("local");
					context.setContextType("topic_cassandra", "id_String");
					context.topic_cassandra = (String) context.getProperty("topic_cassandra");
					context.setContextType("url", "id_String");
					context.url = (String) context.getProperty("url");
					context.setContextType("zookeeper_host", "id_String");
					context.zookeeper_host = (String) context.getProperty("zookeeper_host");
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("group_cassandra")) {
				context.group_cassandra = (String) parentContextMap.get("group_cassandra");
			}
			if (parentContextMap.containsKey("cassandra_host")) {
				context.cassandra_host = (String) parentContextMap.get("cassandra_host");
			}
			if (parentContextMap.containsKey("cassandra_port")) {
				context.cassandra_port = (String) parentContextMap.get("cassandra_port");
			}
			if (parentContextMap.containsKey("column_family")) {
				context.column_family = (String) parentContextMap.get("column_family");
			}
			if (parentContextMap.containsKey("data")) {
				context.data = (String) parentContextMap.get("data");
			}
			if (parentContextMap.containsKey("kafka_host")) {
				context.kafka_host = (String) parentContextMap.get("kafka_host");
			}
			if (parentContextMap.containsKey("keyspace")) {
				context.keyspace = (String) parentContextMap.get("keyspace");
			}
			if (parentContextMap.containsKey("local")) {
				context.local = (String) parentContextMap.get("local");
			}
			if (parentContextMap.containsKey("topic_cassandra")) {
				context.topic_cassandra = (String) parentContextMap.get("topic_cassandra");
			}
			if (parentContextMap.containsKey("url")) {
				context.url = (String) parentContextMap.get("url");
			}
			if (parentContextMap.containsKey("zookeeper_host")) {
				context.zookeeper_host = (String) parentContextMap.get("zookeeper_host");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tForeach_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tForeach_1) {
			globalMap.put("tForeach_1_SUBPROCESS_STATE", -1);

			e_tForeach_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : opendata2kafkaIteration");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring=")) {// for trunjob call
			enableLogStash = "true".equalsIgnoreCase(arg.substring(13));
		}

		if (!enableLogStash) {
			enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 62258 characters generated by Talend Open Studio for Big Data on the
 * September 10, 2019 at 12:42:13 PM UTC
 ************************************************************************************************/